import React, { useState, useEffect } from 'react';
import { BrowserRouter, Routes, Route, Navigate, useNavigate } from 'react-router-dom';
import { initializeApp } from 'firebase/app';
import { getAuth, onAuthStateChanged, signInWithEmailAndPassword, signOut, createUserWithEmailAndPassword } from 'firebase/auth';
import { getFirestore, doc, setDoc, getDoc } from 'firebase/firestore';
import { Users, Calendar, FileText, Plus, Phone, MapPin, DollarSign, Receipt, Send, CheckCircle, Search, List, Grid, ChevronLeft, ChevronRight, Wrench, X, Quote, Briefcase } from 'lucide-react';
import { useForm } from 'react-hook-form';
import debounce from 'lodash.debounce';

// Firebase Config (Replace with your actual config)
const firebaseConfig = {
  apiKey: "YOUR_API_KEY",
  authDomain: "YOUR_AUTH_DOMAIN",
  projectId: "YOUR_PROJECT_ID",
  storageBucket: "YOUR_STORAGE_BUCKET",
  messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
  appId: "YOUR_APP_ID"
};

const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

const Login = () => {
  const { register, handleSubmit, formState: { errors } } = useForm();
  const navigate = useNavigate();
  const [error, setError] = useState('');

  const onSubmit = async (data) => {
    try {
      await signInWithEmailAndPassword(auth, data.email, data.password);
      navigate('/');
    } catch (err) {
      setError('Invalid email or password');
    }
  };

  const onSignup = async () => {
    try {
      await createUserWithEmailAndPassword(auth, prompt('Enter email'), prompt('Enter password'));
      navigate('/');
    } catch (err) {
      setError('Signup failed');
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 flex items-center justify-center p-4">
      <div className="bg-white rounded-2xl shadow-xl p-8 w-full max-w-md">
        <h2 className="text-2xl font-bold text-gray-900 mb-6">Login to TradeCRM</h2>
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-5">
          <div>
            <label className="text-sm font-medium text-gray-700 mb-1 block">Email</label>
            <input {...register('email', { required: true })} type="email" placeholder="user@example.com" className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:border-blue-500 focus:ring-4 focus:ring-blue-500/10 outline-none" />
            {errors.email && <p className="text-red-500 text-xs mt-1">Required</p>}
          </div>
          <div>
            <label className="text-sm font-medium text-gray-700 mb-1 block">Password</label>
            <input {...register('password', { required: true })} type="password" placeholder="••••••••" className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:border-blue-500 focus:ring-4 focus:ring-blue-500/10 outline-none" />
            {errors.password && <p className="text-red-500 text-xs mt-1">Required</p>}
          </div>
          {error && <p className="text-red-500 text-sm">{error}</p>}
          <button type="submit" className="w-full bg-blue-500 text-white py-3 rounded-xl hover:bg-blue-600 font-medium">Login</button>
          <button type="button" onClick={onSignup} className="w-full bg-gray-100 text-gray-700 py-3 rounded-xl hover:bg-gray-200 font-medium">Sign Up</button>
        </form>
      </div>
    </div>
  );
};

const TradesCRM = () => {
  const [activeTab, setActiveTab] = useState('customers');
  const [customers, setCustomers] = useState([]);
  const [jobs, setJobs] = useState([]);
  const [invoices, setInvoices] = useState([]);
  const [quotes, setQuotes] = useState([]);
  const [showAddCustomer, setShowAddCustomer] = useState(false);
  const [showAddJob, setShowAddJob] = useState(false);
  const [showAddInvoice, setShowAddInvoice] = useState(false);
  const [showAddQuote, setShowAddQuote] = useState(false);
  const [showCustomerDetails, setShowCustomerDetails] = useState(null);
  const [showJobDetails, setShowJobDetails] = useState(null);
  const [showQuoteDetails, setShowQuoteDetails] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [jobView, setJobView] = useState('list');
  const [currentDate, setCurrentDate] = useState(new Date());
  const [user, setUser] = useState(null);
  const [showOnboarding, setShowOnboarding] = useState(false);
  const [businessProfile, setBusinessProfile] = useState(null);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
      setUser(currentUser);
      if (currentUser) {
        // Fetch business profile
        const profileDoc = await getDoc(doc(db, 'users', currentUser.uid));
        if (profileDoc.exists()) {
          setBusinessProfile(profileDoc.data());
          setShowOnboarding(false);
        } else {
          setShowOnboarding(true);
        }
        // Load sample data (replace with Firestore fetch in production)
        setCustomers([
          { id: 1, name: 'John Smith', phone: '(555) 123-4567', address: '123 Main St, Chicago, IL', customerType: 'Residential', lastJob: '2025-05-15', notes: 'Gate code: 1234', jobHistory: [] },
          { id: 2, name: 'ABC Restaurant', phone: '(555) 987-6543', address: '456 Business Ave, Chicago, IL', customerType: 'Commercial', lastJob: '2025-06-01', notes: 'Contact Sarah', jobHistory: [] }
        ]);
        setJobs([
          { id: 1, customerId: 1, customerName: 'John Smith', title: 'Kitchen Sink Repair', description: 'Leaky faucet', scheduledDate: '2025-06-12', estimatedHours: 2, estimatedCost: 150, address: '123 Main St, Chicago, IL' },
          { id: 2, customerId: 2, customerName: 'ABC Restaurant', title: 'Grease Trap Cleaning', description: 'Monthly maintenance', scheduledDate: '2025-06-10', estimatedHours: 3, estimatedCost: 350, address: '456 Business Ave, Chicago, IL' }
        ]);
        setInvoices([
          { id: 1, jobId: 1, customerName: 'John Smith', customerAddress: '123 Main St, Chicago, IL', amount: 185, subtotal: 150, tax: 35, status: 'Paid', dueDate: '2025-06-15', issueDate: '2025-06-01', description: 'Kitchen Sink Repair', items: [{ description: 'Service Call', quantity: 1, rate: 85, amount: 85 }, { description: 'Labor', quantity: 1, rate: 65, amount: 65 }] },
          { id: 2, jobId: 2, customerName: 'ABC Restaurant', customerAddress: '456 Business Ave, Chicago, IL', amount: 350, subtotal: 300, tax: 50, status: 'Pending', dueDate: '2025-06-25', issueDate: '2025-06-10', description: 'Grease Trap Cleaning', items: [{ description: 'Cleaning', quantity: 1, rate: 200, amount: 200 }, { description: 'Labor', quantity: 2, rate: 75, amount: 150 }] }
        ]);
        setQuotes([
          { id: 1, customerId: 1, customerName: 'John Smith', customerAddress: '123 Main St, Chicago, IL', description: 'Bathroom Faucet Replacement', amount: 250, subtotal: 200, tax: 50, status: 'Draft', issueDate: '2025-06-10', expiryDate: '2025-06-17', items: [{ description: 'Faucet', quantity: 1, rate: 100, amount: 100 }, { description: 'Labor', quantity: 1, rate: 100, amount: 100 }] }
        ]);
      }
    });
    return () => unsubscribe();
  }, []);

  const addCustomer = (customerData) => {
    const newCustomer = { id: customers.length + 1, ...customerData, lastJob: null, notes: customerData.notes || '', jobHistory: [] };
    setCustomers([...customers, newCustomer]);
    setShowAddCustomer(false);
  };

  const addJob = (jobData) => {
    const customer = customers.find(c => c.id === parseInt(jobData.customerId));
    const newJob = { id: jobs.length + 1, ...jobData, customerId: parseInt(jobData.customerId), customerName: customer?.name || 'Unknown' };
    setJobs([...jobs, newJob]);
    setShowAddJob(false);
  };

  const addInvoice = (invoiceData) => {
    const newInvoice = { id: invoices.length + 1, ...invoiceData, issueDate: new Date().toISOString().split('T')[0] };
    setInvoices([...invoices, newInvoice]);
    setShowAddInvoice(false);
  };

  const addQuote = (quoteData) => {
    const customer = customers.find(c => c.id === parseInt(quoteData.customerId));
    const newQuote = { id: quotes.length + 1, ...quoteData, customerName: customer?.name, customerAddress: customer?.address, issueDate: new Date().toISOString().split('T')[0], status: 'Draft' };
    setQuotes([...quotes, newQuote]);
    setShowAddQuote(false);
  };

  const convertQuoteToJob = (quote) => {
    const newJob = {
      id: jobs.length + 1,
      customerId: quote.customerId,
      customerName: quote.customerName,
      title: quote.description,
      description: quote.description,
      scheduledDate: new Date().toISOString().split('T')[0],
      estimatedHours: 2,
      estimatedCost: quote.amount,
      address: quote.customerAddress
    };
    setJobs([...jobs, newJob]);
    setQuotes(quotes.map(q => q.id === quote.id ? { ...q, status: 'Accepted' } : q));
  };

  const emailInvoice = (invoiceId) => {
    alert(`Invoice #${invoiceId} sent! (Mock)`);
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'Scheduled': case 'Draft': return 'bg-blue-50 text-blue-700 border-blue-200';
      case 'In Progress': case 'Sent': return 'bg-amber-50 text-amber-700 border-amber-200';
      case 'Completed': case 'Accepted': return 'bg-emerald-50 text-emerald-700 border-emerald-200';
      case 'Paid': return 'bg-emerald-50 text-emerald-700 border-emerald-200';
      case 'Pending': return 'bg-amber-50 text-amber-700 border-amber-200';
      case 'Overdue': return 'bg-red-50 text-red-700 border-red-200';
      default: return 'bg-gray-50 text-gray-700 border-gray-200';
    }
  };

  const OnboardingWizard = ({ onComplete }) => {
    const [step, setStep] = useState(1);
    const { register, handleSubmit, formState: { errors } } = useForm();
    const [formData, setFormData] = useState({ tradeType: 'Plumbing', services: [], businessName: '', location: '' });

    const servicesOptions = {
      Plumbing: ['Leak Repair', 'Water Heater Installation', 'Drain Cleaning'],
      HVAC: ['AC Repair', 'Furnace Installation', 'Duct Cleaning'],
      Electrical: ['Wiring Installation', 'Lighting Repair', 'Panel Upgrade']
    };

    const onSubmit = async (data) => {
      const updatedData = { ...formData, ...data };
      if (step === 1) {
        setFormData(updatedData);
        setStep(2);
      } else if (step === 2) {
        setFormData({ ...updatedData, services: data.services });
        setStep(3);
      } else {
        try {
          await setDoc(doc(db, 'users', auth.currentUser.uid), {
            tradeType: updatedData.tradeType,
            services: updatedData.services,
            businessName: data.businessName,
            location: data.location
          });
          setBusinessProfile(updatedData);
          onComplete();
        } catch (error) {
          console.error('Onboarding error:', error);
        }
      }
    };

    return (
      <div className="fixed inset-0 bg-black/30 backdrop-blur-sm flex items-center justify-center p-4 z-50">
        <div className="bg-white rounded-2xl shadow-xl p-8 w-full max-w-md">
          <h3 className="text-2xl font-semibold mb-6 text-gray-900">Setup Your Business</h3>
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-5">
            {step === 1 && (
              <>
                <div>
                  <label className="text-sm font-medium text-gray-700 mb-1 block">Trade Type</label>
                  <select {...register('tradeType', { required: true })} className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:border-blue-500 focus:ring-4 focus:ring-blue-500/10 outline-none">
                    <option value="Plumbing">Plumbing</option>
                    <option value="HVAC">HVAC</option>
                    <option value="Electrical">Electrical</option>
                  </select>
                  {errors.tradeType && <p className="text-red-500 text-xs mt-1">Required</p>}
                </div>
                <button type="submit" className="w-full bg-blue-500 text-white py-3 rounded-xl hover:bg-blue-600 font-medium">Next</button>
              </>
            )}
            {step === 2 && (
              <>
                <div>
                  <label className="text-sm font-medium text-gray-700 mb-1 block">Services Offered</label>
                  {servicesOptions[formData.tradeType].map(service => (
                    <label key={service} className="flex items-center gap-2 mb-2">
                      <input type="checkbox" value={service} {...register('services', { required: true })} />
                      {service}
                    </label>
                  ))}
                  {errors.services && <p className="text-red-500 text-xs mt-1">Select at least one</p>}
                </div>
                <div className="flex gap-3">
                  <button type="button" onClick={() => setStep(1)} className="flex-1 bg-gray-100 text-gray-700 py-3 rounded-xl hover:bg-gray-200 font-medium">Back</button>
                  <button type="submit" className="flex-1 bg-blue-500 text-white py-3 rounded-xl hover:bg-blue-600 font-medium">Next</button>
                </div>
              </>
            )}
            {step === 3 && (
              <>
                <div>
                  <label className="text-sm font-medium text-gray-700 mb-1 block">Business Name</label>
                  <input {...register('businessName', { required: true })} placeholder="Smith's Plumbing" className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:border-blue-500 focus:ring-4 focus:ring-blue-500/10 outline-none" />
                  {errors.businessName && <p className="text-red-500 text-xs mt-1">Required</p>}
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-700 mb-1 block">Location</label>
                  <input {...register('location', { required: true })} placeholder="Chicago, IL" className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:border-blue-500 focus:ring-4 focus:ring-blue-500/10 outline-none" />
                  {errors.location && <p className="text-red-500 text-xs mt-1">Required</p>}
                </div>
                <div className="flex gap-3">
                  <button type="button" onClick={() => setStep(2)} className="flex-1 bg-gray-100 text-gray-700 py-3 rounded-xl hover:bg-gray-200 font-medium">Back</button>
                  <button type="submit" className="flex-1 bg-blue-500 text-white py-3 rounded-xl hover:bg-blue-600 font-medium">Finish</button>
                </div>
              </>
            )}
          </form>
        </div>
      </div>
    );
  };

  const CustomerForm = ({ onSubmit, onCancel }) => {
    const { register, handleSubmit, formState: { errors } } = useForm();
    return (
      <div className="fixed inset-0 bg-black/30 backdrop-blur-sm flex items-center justify-center p-4 z-50">
        <div className="bg-white rounded-2xl shadow-xl p-8 w-full max-w-md">
          <h3 className="text-2xl font-semibold mb-6 text-gray-900">Add Customer</h3>
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-5">
            <div>
              <label className="text-sm font-medium text-gray-700 mb-1 block">Name</label>
              <input {...register('name', { required: true })} placeholder="John Smith" className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:border-blue-500 focus:ring-4 focus:ring-blue-500/10 outline-none" />
              {errors.name && <p className="text-red-500 text-xs mt-1">Required</p>}
            </div>
            <div>
              <label className="text-sm font-medium text-gray-700 mb-1 block">Phone</label>
              <input {...register('phone', { required: true })} placeholder="(555) 123-4567" className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:border-blue-500 focus:ring-4 focus:ring-blue-500/10 outline-none" />
              {errors.phone && <p className="text-red-500 text-xs mt-1">Required</p>}
            </div>
            <div>
              <label className="text-sm font-medium text-gray-700 mb-1 block">Address</label>
              <input {...register('address', { required: true })} placeholder="123 Main St, Chicago, IL" className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:border-blue-500 focus:ring-4 focus:ring-blue-500/10 outline-none" />
              {errors.address && <p className="text-red-500 text-xs mt-1">Required</p>}
            </div>
            <div>
              <label className="text-sm font-medium text-gray-700 mb-1 block">Type</label>
              <select {...register('customerType')} className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:border-blue-500 focus:ring-4 focus:ring-blue-500/10 outline-none">
                <option value="Residential">Residential</option>
                <option value="Commercial">Commercial</option>
              </select>
            </div>
            <div>
              <label className="text-sm font-medium text-gray-700 mb-1 block">Notes</label>
              <textarea {...register('notes')} placeholder="Gate code, preferences..." className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:border-blue-500 focus:ring-4 focus:ring-blue-500/10 outline-none resize-none" rows="3" />
            </div>
            <div className="flex gap-3 pt-4">
              <button type="submit" className="flex-1 bg-blue-500 text-white py-3 rounded-xl hover:bg-blue-600 font-medium">Add Customer</button>
              <button type="button" onClick={onCancel} className="flex-1 bg-gray-100 text-gray-700 py-3 rounded-xl hover:bg-gray-200 font-medium">Cancel</button>
            </div>
          </form>
        </div>
      </div>
    );
  };

  const JobForm = ({ onSubmit, onCancel }) => {
    const { register, handleSubmit, formState: { errors } } = useForm();
    return (
      <div className="fixed inset-0 bg-black/30 backdrop-blur-sm flex items-center justify-center p-4 z-50">
        <div className="bg-white rounded-2xl shadow-xl p-8 w-full max-w-md">
          <h3 className="text-2xl font-semibold mb-6 text-gray-900">Schedule Job</h3>
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-5">
            <div>
              <label className="text-sm font-medium text-gray-700 mb-1 block">Customer</label>
              <select {...register('customerId', { required: true })} className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:border-blue-500 focus:ring-4 focus:ring-blue-500/10 outline-none">
                <option value="">Select a customer</option>
                {customers.map(customer => <option key={customer.id} value={customer.id}>{customer.name}</option>)}
              </select>
              {errors.customerId && <p className="text-red-500 text-xs mt-1">Required</p>}
            </div>
            <div>
              <label className="text-sm font-medium text-gray-700 mb-1 block">Job Title</label>
              <select {...register('title', { required: true })} className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:border-blue-500 focus:ring-4 focus:ring-blue-500/10 outline-none">
                <option value="">Select a service</option>
                {businessProfile?.services.map(service => <option key={service} value={service}>{service}</option>)}
              </select>
              {errors.title && <p className="text-red-500 text-xs mt-1">Required</p>}
            </div>
            <div>
              <label className="text-sm font-medium text-gray-700 mb-1 block">Description</label>
              <textarea {...register('description')} placeholder="Details..." className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:border-blue-500 focus:ring-4 focus:ring-blue-500/10 outline-none resize-none" rows="3" />
            </div>
            <div>
              <label className="text-sm font-medium text-gray-700 mb-1 block">Scheduled Date</label>
              <input type="date" {...register('scheduledDate', { required: true })} className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:border-blue-500 focus:ring-4 focus:ring-blue-500/10 outline-none" />
              {errors.scheduledDate && <p className="text-red-500 text-xs mt-1">Required</p>}
            </div>
            <div>
              <label className="text-sm font-medium text-gray-700 mb-1 block">Job Address</label>
              <input {...register('address')} placeholder="Work location" className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:border-blue-500 focus:ring-4 focus:ring-blue-500/10 outline-none" />
            </div>
            <div>
              <label className="text-sm font-medium text-gray-700 mb-1 block">Estimated Hours</label>
              <input type="number" {...register('estimatedHours', { required: true, min: 0 })} placeholder="2" className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:border-blue-500 focus:ring-4 focus:ring-blue-500/10 outline-none" />
              {errors.estimatedHours && <p className="text-red-500 text-xs mt-1">Required, must be positive</p>}
            </div>
            <div>
              <label className="text-sm font-medium text-gray-700 mb-1 block">Estimated Cost</label>
              <input type="number" {...register('estimatedCost', { required: true, min: 0 })} placeholder="150" className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:border-blue-500 focus:ring-4 focus:ring-blue-500/10 outline-none" />
              {errors.estimatedCost && <p className="text-red-500 text-xs mt-1">Required, must be positive</p>}
            </div>
            <div className="flex gap-3 pt-4">
              <button type="submit" className="flex-1 bg-blue-500 text-white py-3 rounded-xl hover:bg-blue-600 font-medium">Schedule Job</button>
              <button type="button" onClick={onCancel} className="flex-1 bg-gray-100 text-gray-700 py-3 rounded-xl hover:bg-gray-200 font-medium">Cancel</button>
            </div>
          </form>
        </div>
      </div>
    );
  };

  const InvoiceForm = ({ onSubmit, onCancel, job }) => {
    const { register, handleSubmit, watch, setValue, formState: { errors } } = useForm({
      defaultValues: {
        jobId: job?.id || '',
        customerName: job?.customerName || '',
        customerAddress: job?.address || '',
        description: job?.title || '',
        dueDate: '',
        taxRate: 10,
        items: [{ description: '', quantity: 1, rate: 0, amount: 0 }]
      }
    });
    const items = watch('items');

    const updateItem = (index, field, value) => {
      const newItems = [...items];
      newItems[index][field] = value;
      if (field === 'quantity' || field === 'rate') {
        newItems[index].amount = newItems[index].quantity * newItems[index].rate;
      }
      setValue('items', newItems);
    };

    const addItem = () => {
      setValue('items', [...items, { description: '', quantity: 1, rate: 0, amount: 0 }]);
    };

    const removeItem = (index) => {
      if (items.length > 1) {
        setValue('items', items.filter((_, i) => i !== index));
      }
    };

    const calculateTotals = () => {
      const subtotal = items.reduce((sum, item) => sum + item.amount, 0);
      const tax = subtotal * (watch('taxRate') / 100);
      const total = subtotal + tax;
      return { subtotal, tax, total };
    };

    const { subtotal, tax, total } = calculateTotals();

    return (
      <div className="fixed inset-0 bg-black/30 backdrop-blur-sm flex items-center justify-center p-4 z-50">
        <div className="bg-white rounded-2xl shadow-xl p-8 w-full max-w-4xl max-h-[90vh] overflow-y-auto">
          <h3 className="text-2xl font-semibold mb-6 text-gray-900">{job ? `Invoice for ${job.title}` : 'Create Invoice'}</h3>
          <form onSubmit={handleSubmit(data => onSubmit({ ...data, subtotal, tax, amount: total, status: 'Pending' }))} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="text-sm font-medium text-gray-700 mb-1 block">Customer</label>
                <input {...register('customerName', { required: true })} className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:border-blue-500 focus:ring-4 focus:ring-blue-500/10 outline-none" />
                {errors.customerName && <p className="text-red-500 text-xs mt-1">Required</p>}
              </div>
              <div>
                <label className="text-sm font-medium text-gray-700 mb-1 block">Due Date</label>
                <input type="date" {...register('dueDate', { required: true })} className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:border-blue-500 focus:ring-4 focus:ring-blue-500/10 outline-none" />
                {errors.dueDate && <p className="text-red-500 text-xs mt-1">Required</p>}
              </div>
            </div>
            <div>
              <label className="text-sm font-medium text-gray-700 mb-1 block">Billing Address</label>
              <input {...register('customerAddress')} className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:border-blue-500 focus:ring-4 focus:ring-blue-500/10 outline-none" />
            </div>
            <div>
              <label className="text-sm font-medium text-gray-700 mb-1 block">Description</label>
              <input {...register('description')} placeholder="Work performed" className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:border-blue-500 focus:ring-4 focus:ring-blue-500/10 outline-none" />
            </div>
            <div>
              <div className="flex items-center justify-between mb-4">
                <h4 className="text-lg font-medium text-gray-900">Line Items</h4>
                <button type="button" onClick={addItem} className="bg-gray-100 text-gray-700 px-4 py-2 rounded-xl hover:bg-gray-200 text-sm font-medium flex items-center gap-2">
                  <Plus className="h-4 w-4" /> Add Item
                </button>
              </div>
              <div className="bg-gray-50 rounded-xl overflow-hidden">
                <div className="grid grid-cols-12 gap-4 p-4 text-sm font-medium text-gray-600 border-b border-gray-200">
                  <div className="col-span-5">Description</div>
                  <div className="col-span-2">Quantity</div>
                  <div className="col-span-2">Rate</div>
                  <div className="col-span-2">Amount</div>
                  <div className="col-span-1"></div>
                </div>
                {items.map((item, index) => (
                  <div key={index} className="grid grid-cols-12 gap-4 p-4 border-b border-gray-100 last:border-0">
                    <div className="col-span-5">
                      <input {...register(`items[${index}].description`)} onChange={(e) => updateItem(index, 'description', e.target.value)} className="w-full px-3 py-2 bg-white border border-gray-200 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-500/10 outline-none" />
                    </div>
                    <div className="col-span-2">
                      <input type="number" {...register(`items[${index}].quantity`)} onChange={(e) => updateItem(index, 'quantity', parseFloat(e.target.value) || 0)} className="w-full px-3 py-2 bg-white border border-gray-200 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-500/10 outline-none" min="0" step="0.01" />
                    </div>
                    <div className="col-span-2">
                      <input type="number" {...register(`items[${index}].rate`)} onChange={(e) => updateItem(index, 'rate', parseFloat(e.target.value) || 0)} className="w-full px-3 py-2 bg-white border border-gray-200 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-500/10 outline-none" min="0" step="0.01" />
                    </div>
                    <div className="col-span-2">
                      <div className="px-3 py-2 bg-gray-100 rounded-lg text-right font-medium">${item.amount.toFixed(2)}</div>
                    </div>
                    <div className="col-span-1 flex justify-center">
                      <button type="button" onClick={() => removeItem(index)} disabled={items.length === 1} className="p-2 text-gray-400 hover:text-red-500 rounded-lg hover:bg-red-50">
                        <X className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
            <div className="flex justify-end">
              <div className="w-80 space-y-3">
                <div className="flex justify-between items-center text-gray-600">
                  <span>Subtotal</span>
                  <span className="font-medium">${subtotal.toFixed(2)}</span>
                </div>
                <div className="flex justify-between items-center text-gray-600">
                  <div className="flex items-center gap-2">
                    <span>Tax</span>
                    <input type="number" {...register('taxRate')} className="w-16 px-2 py-1 bg-gray-50 border border-gray-200 rounded-lg text-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500/10 outline-none" min="0" max="100" step="0.1" />
                    <span className="text-sm">%</span>
                  </div>
                  <span className="font-medium">${tax.toFixed(2)}</span>
                </div>
                <div className="flex justify-between items-center text-lg font-semibold text-gray-900 pt-3 border-t">
                  <span>Total</span>
                  <span>${total.toFixed(2)}</span>
                </div>
              </div>
            </div>
            <div className="flex gap-3">
              <button type="submit" className="flex-1 bg-blue-500 text-white py-3 rounded-xl hover:bg-blue-600 font-medium">Create Invoice</button>
              <button type="button" onClick={onCancel} className="flex-1 bg-gray-100 text-gray-700 py-3 rounded-xl hover:bg-gray-200 font-medium">Cancel</button>
            </div>
          </form>
        </div>
      </div>
    );
  };

  const QuoteForm = ({ onSubmit, onCancel }) => {
    const { register, handleSubmit, watch, setValue, formState: { errors } } = useForm({
      defaultValues: {
        customerId: '',
        customerName: '',
        customerAddress: '',
        description: '',
        expiryDate: '',
        taxRate: 10,
        items: [{ description: '', quantity: 1, rate: 0, amount: 0 }]
      }
    });
    const items = watch('items');

    const updateItem = (index, field, value) => {
      const newItems = [...items];
      newItems[index][field] = value;
      if (field === 'quantity' || field === 'rate') {
        newItems[index].amount = newItems[index].quantity * newItems[index].rate;
      }
      setValue('items', newItems);
    };

    const addItem = () => {
      setValue('items', [...items, { description: '', quantity: 1, rate: 0, amount: 0 }]);
    };

    const removeItem = (index) => {
      if (items.length > 1) {
        setValue('items', items.filter((_, i) => i !== index));
      }
    };

    const calculateTotals = () => {
      const subtotal = items.reduce((sum, item) => sum + item.amount, 0);
      const tax = subtotal * (watch('taxRate') / 100);
      const total = subtotal + tax;
      return { subtotal, tax, total };
    };

    const { subtotal, tax, total } = calculateTotals();

    return (
      <div className="fixed inset-0 bg-black/30 backdrop-blur-sm flex items-center justify-center p-4 z-50">
        <div className="bg-white rounded-2xl shadow-xl p-8 w-full max-w-4xl max-h-[90vh] overflow-y-auto">
          <h3 className="text-2xl font-semibold mb-6 text-gray-900">Create Quote</h3>
          <form onSubmit={handleSubmit(data => onSubmit({ ...data, subtotal, tax, amount: total }))} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="text-sm font-medium text-gray-700 mb-1 block">Customer</label>
                <select {...register('customerId', { required: true })} onChange={(e) => {
                  const customer = customers.find(c => c.id === parseInt(e.target.value));
                  setValue('customerName', customer?.name || '');
                  setValue('customerAddress', customer?.address || '');
                }} className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:border-blue-500 focus:ring-4 focus:ring-blue-500/10 outline-none">
                  <option value="">Select a customer</option>
                  {customers.map(customer => <option key={customer.id} value={customer.id}>{customer.name}</option>)}
                </select>
                {errors.customerId && <p className="text-red-500 text-xs mt-1">Required</p>}
              </div>
              <div>
                <label className="text-sm font-medium text-gray-700 mb-1 block">Expiry Date</label>
                <input type="date" {...register('expiryDate', { required: true })} className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:border-blue-500 focus:ring-4 focus:ring-blue-500/10 outline-none" />
                {errors.expiryDate && <p className="text-red-500 text-xs mt-1">Required</p>}
              </div>
            </div>
            <div>
              <label className="text-sm font-medium text-gray-700 mb-1 block">Description</label>
              <input {...register('description', { required: true })} placeholder="Work proposed" className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:bg-white focus:border-blue-500 focus:ring-2 focus:ring-blue-500/10 outline-none" />
              {errors.description && <p className="text-red-500 text-xs mt-1">Required</p>}
            </div>
            <div>
              <div className="flex items-center justify-between mb-4">
                <h4 className="text-lg font-medium text-gray-900">Line Items</h4>
                <button type="button" onClick={addItem} className="bg-gray-100 text-gray-700 py-2 px-4 rounded-xl hover:bg-gray-200 text-sm font-medium flex items-center gap-2">
                  <Plus className="h-4 w-4" /> Add Item
                </button>
              </div>
              <div className="bg-gray-50 rounded-xl overflow-hidden">
                <div className="grid grid-cols-12 gap-4 p-4 text-sm font-medium text-gray-600 border-b border-gray-200">
                  <div className="col-span-5">Description</div>
                  <div className="col-span-2">Quantity</div>
                  <div className="col-span-2">Rate</div>
                  <div className="col-span-2">Amount</div>
                  <div className="col-span-1"></div>
                </div>
                {items.map((item, index) => (
                  <div key={index} className="grid grid-cols-12 gap-4 p-4 border-b border-gray-100 last:border-b-0">
                    <div className="col-span-5">
                      <input {...register(`items[${index}].description`)} onChange={(e) => updateItem(index, 'description', e.target.value)} className="w-full px-3 py-2 bg-white border border-gray-200 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-500/10 outline-none" />
                    </div>
                    <div className="col-span-2">
                      <input type="number" {...register(`items[${index}].quantity`)} onChange={(e) => updateItem(index, 'quantity', parseFloat(e.target.value) || 0)} className="w-full px-3 py-2 bg-white border border-gray-200 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-500/10 outline-none" min="0" step="0.01" />
                    </div>
                    <div className="col-span-2">
                      <input type="number" {...register(`items[${index}].rate`)} onChange={(e) => updateItem(index, 'rate', parseFloat(e.target.value) || 0)} className="w-full px-3 py-2 bg-white border border-gray-200 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-500/10 outline-none" min="0" step="0.01" />
                    </div>
                    <div className="col-span-2">
                      <div className="px-3 py-2 bg-gray-100 rounded-lg text-right font-medium">${item.amount.toFixed(2)}</div>
                    </div>
                    <div className="col-span-1 flex items-center justify-center">
                      <button type="button" onClick={() => removeItem(index)} disabled={items.length === 1} className="p-2 text-gray-400 hover:text-red-500 rounded-lg hover:bg-red-50">
                        <X className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
            <div className="flex justify-end">
              <div className="w-80 space-y-3">
                <div className="flex justify-between items-center text-gray-600">
                  <span>Subtotal</span>
                  <span className="font-medium">${subtotal.toFixed(2)}</span>
                </div>
                <div className="flex justify-between items-center text-gray-600">
                  <div className="flex items-center gap-2">
                    <span>Tax</span>
                    <input type="number" {...register('taxRate')} className="w-16 px-2 py-1 bg-gray-50 border border-gray-200 rounded-lg text-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500/10 outline-none" min="0" max="100" step="0.1" />
                    <span className="text-sm">%</span>
                  </div>
                  <span className="font-medium">${tax.toFixed(2)}</span>
                </div>
                <div className="flex justify-between items-center text-lg font-semibold text-gray-900 pt-3 border-t">
                  <span>Total</span>
                  <span>${total.toFixed(2)}</span>
                </div>
              </div>
            </div>
            <div className="flex gap-3">
              <button type="submit" className="flex-1 bg-blue-500 text-white py-3 rounded-xl hover:bg-blue-600 font-medium">Create Quote</button>
              <button type="button" onClick={onCancel} className="flex-1 bg-gray-100 text-gray-700 py-3 rounded-xl hover:bg-gray-200 font-medium">Cancel</button>
            </div>
          </form>
        </div>
      </div>
    );
  };

  const CustomerDetailsModal = ({ customer, onClose }) => {
    if (!customer) return null;
    return (
      <div className="fixed inset-0 bg-black/30 backdrop-blur-sm flex items-center justify-center p-4 z-50">
        <div className="bg-white rounded-2xl shadow-xl p-8 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-2xl font-semibold text-gray-900">{customer.name}</h3>
            <button onClick={onClose} className="p-2 hover:bg-gray-100 rounded-lg"><X className="h-5 w-5 text-gray-500" /></button>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
            <div className="space-y-1">
              <h4 className="text-sm font-medium text-gray-500 uppercase tracking-wider mb-4">Contact Information</h4>
              <div className="space-y-3">
                <div className="flex items-center gap-3 text-gray-700"><Phone className="h-4 w-4" />{customer.phone}</div>
                <div className="flex items-center gap-3 text-gray-700"><MapPin className="h-4 w-4" />{customer.address}</div>
              </div>
            </div>
            <div>
              <h4 className="text-sm font-medium text-gray-500 uppercase tracking-wider mb-4">Customer Type</h4>
              <span className={`inline-block px-3 py-1 rounded-full text-sm font-medium ${customer.customerType === 'Commercial' ? 'bg-purple-100 text-purple-700' : 'bg-emerald-100 text-green-700'}`}>
                {customer.customerType}
              </span>
            </div>
          </div>
          {customer.notes && (
            <div className="mb-8">
              <h4 className="text-sm font-medium text-gray-500 uppercase tracking-wider mb-4">Notes</h4>
              <div className="bg-amber-50 border border-amber-200 rounded-xl p-4"><p className="text-sm text-gray-700">{customer.notes}</p></div>
            </div>
          )}
          <div>
            <h4 className="text-sm font-medium text-gray-500 uppercase tracking-wider mb-4">Job History</h4>
            {customer.jobHistory.length > 0 ? (
              <div className="space-y-3">
                {customer.jobHistory.map((job, index) => (
                  <div key={index} className="bg-gray-50 rounded-lg p-4 hover:bg-gray-100">
                    <div className="flex justify-between">
                      <div><p className="font-medium text-gray-900">{job.title}</p><p className="text-sm text-gray-500">{new Date(job.date).toLocaleDateString()}</p></div>
                      <span className="font-semibold text-gray-900">${job.amount}</span>
                    </div>
                  </div>
                ))}
              </div>
            ) : <p className="text-gray-500 text-center py-8">No job history yet</p>}
          </div>
        </div>
      </div>
    );
  };

  const JobDetailsModal = ({ job, id }) => {
    if (!job) return null;
    return (
      <div className="fixed inset-0 bg-black/30 backdrop-blur-sm flex items-center justify-center p-4 z-50">
        <div className="bg-white rounded-lg shadow-xl p-8 w-full max-w-4xl max-h-[90vh] overflow-y-auto">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-2xl font-semibold text-gray-900">{job.title}</h3>
            <button onClick={onClose} className="p-2 hover:bg-gray-100 rounded-lg"><X className="h-5 w-5 text-gray-500" /></button>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
            <div>
              <h4 className="text-sm font-medium text-gray-500 uppercase tracking-wider mb-4">Job Information</h4>
              <div className="space-y-3">
                <div className="flex items-center justify-between"><span className="text-gray-600">Customer</span><span className="font-medium text-gray-900">{job.customerName}</span></div>
                <div className="flex items-center justify-between"><span className="text-gray-600">Date</span><span className="font-medium">{new Date(job.scheduledDate).toLocaleDateString()}</span></div>
                <div className="flex items-center justify-between"><span className="text-gray-600">Address</span><span className="font-medium text-right">{job.address}</span></div>
              </div>
            </div>
            <div>
              <h4 className="text-sm font-medium text-gray-500 uppercase tracking-wider mb-4">Estimates</h4>
              <div className="space-y-3">
                <div className="flex items-center justify-between"><span className="text-gray-600">Hours</span><span className="font-medium">{job.estimatedHours}h</span></div>
                <div className="flex items-center justify-between"><span className="text-gray-600">Cost</span><span className="font-medium">${job.estimatedCost}</span></div>
              </div>
            </div>
          </div>
          <div className="mb-8">
            <h4 className="text-sm font-medium text-gray-500 uppercase tracking-wider mb-4">Description</h4>
            <p className="text-gray-700 bg-gray-50 rounded-lg p-4">{job.description}</p>
          </div>
          <div className="flex gap-3">
            <button onClick={() => { setShowAddInvoice(true); onClose(); }} className="bg-emerald-500 text-white px-6 py-3 rounded-lg hover:bg-emerald-600 font-medium flex items-center gap-2">
              <Receipt className="h-4 w-4" /> Create Invoice
            </button>
            <button onClick={onClose} className="bg-gray-100 text-gray-700 px-6 py-3 rounded-lg hover:bg-gray-200 font-medium">Close</button>
          </div>
        </div>
      </div>
    );
  };

  const QuoteDetailsModal = ({ quote, onClose }) => {
    if (!quote) return null;
    return (
      <div className="fixed inset-0 bg-black/30 backdrop-blur-sm flex items-center justify-center p-4 z-50">
        <div className="bg-white rounded-lg shadow-xl p-8 w-full max-w-4xl max-h-[90vh] overflow-y-auto">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-2xl font-semibold text-gray-900">Quote #{quote.id}</h3>
            <button onClick={onClose} className="p-2 hover:bg-gray-100 rounded-lg"><X className="h-5 w-5 text-gray-500" /></button>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
            <div>
              <h4 className="text-sm font-medium text-gray-500 uppercase tracking-wider mb-4">Quote Information</h4>
              <div className="space-y-3">
                <div className="flex items-center justify-between"><span className="text-gray-600">Customer</span><span className="font-medium text-gray-900">{quote.customerName}</span></div>
                <div className="flex items-center justify-between"><span className="text-gray-600">Status</span><span className={`px-3 py-1 rounded-full text-xs font-medium border ${getStatusColor(quote.status)}`}>{quote.status}</span></div>
                <div className="flex items-center justify-between"><span className="text-gray-600">Issue Date</span><span className="font-medium">{new Date(quote.issueDate).toLocaleDateString()}</span></div>
                <div className="flex items-center justify-between"><span className="text-gray-600">Expiry Date</span><span className="font-medium">{new Date(quote.expiryDate).toLocaleDateString()}</span></div>
                <div className="flex items-center justify-between"><span className="text-gray-600">Address</span><span className="font-medium text-right">{quote.customerAddress}</span></div>
              </div>
            </div>
            <div>
              <h4 className="text-sm font-medium text-gray-500 uppercase tracking-wider mb-4">Financials</h4>
              <div className="space-y-3">
                <div className="flex items-center justify-between"><span className="text-gray-600">Subtotal</span><span className="font-medium">${quote.subtotal.toFixed(2)}</span></div>
                <div className="flex items-center justify-between"><span className="text-gray-600">Tax</span><span className="font-medium">${quote.tax.toFixed(2)}</span></div>
                <div className="flex items-center justify-between"><span className="text-gray-600">Total</span><span className="font-medium">${quote.amount.toFixed(2)}</span></div>
              </div>
            </div>
          </div>
          <div className="mb-8">
            <h4 className="text-sm font-medium text-gray-500 uppercase tracking-wider mb-4">Description</h4>
            <p className="text-gray-700 bg-gray-50 rounded-lg p-4">{quote.description}</p>
          </div>
          <div className="mb-8">
            <h4 className="text-sm font-medium text-gray-500 uppercase tracking-wider mb-4">Line Items</h4>
            <div className="bg-gray-50 rounded-lg p-4">
              {quote.items.map((item, idx) => (
                <div key={idx} className="flex justify-between text-sm mb-2">
                  <span className="text-gray-600">{item.description} ({item.quantity}x)</span>
                  <span className="font-medium text-gray-900">${item.amount.toFixed(2)}</span>
                </div>
              ))}
            </div>
          </div>
          <div className="flex gap-3">
            {quote.status === 'Draft' && <button onClick={() => setQuotes(quotes.map(q => q.id === quote.id ? { ...q, status: 'Sent' } : q))} className="bg-blue-500 text-white px-4 py-2 rounded-xl hover:bg-blue-600 font-medium flex items-center gap-2">
              <Send className="h-4 w-4" /> Send Quote
            </button>}
            {quote.status === 'Sent' && <button onClick={() => convertQuoteToJob(quote)} className="bg-green-500 text-white px-4 py-2 rounded-xl hover:bg-green-600 font-medium flex items-center gap-2">
              <Briefcase className="h-4 w-4" /> Convert to Job
            </button>}
            <button type="button" onClick={onClose} className="bg-gray-100 text-gray-700 px-4 py-2 rounded-xl hover:bg-gray-200 font-medium">Close</button>
          </div>
        </div>
      </div>
    );
  };

  const filteredCustomers = customers.filter(c => c.name.toLowerCase().includes(searchTerm.toLowerCase()) || c.phone.includes(searchTerm) || c.address.toLowerCase().includes(searchTerm.toLowerCase()));
  const filteredJobs = jobs.filter(j => j.title.toLowerCase().includes(searchTerm.toLowerCase()) || j.customerName.toLowerCase().includes(searchTerm.toLowerCase()) || j.description?.toLowerCase().includes(searchTerm.toLowerCase()));
  const filteredInvoices = invoices.filter(i => i.customerName.toLowerCase().includes(searchTerm.toLowerCase()) || i.description.toLowerCase().includes(searchTerm.toLowerCase()));
  const filteredQuotes = quotes.filter(q => q.customerName?.toLowerCase().includes(searchTerm.toLowerCase()) || q.description?.toLowerCase().includes(searchTerm.toLowerCase()));

  const getDaysInMonth = (date) => new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
  const getFirstDayOfMonth = (date) => new Date(date.getFullYear(), date.getMonth(), 1).getDay();
  const getJobsForDate = (date) => jobs.filter(j => j.scheduledDate === date.toISOString().split('T')[0]);
  const navigateMonth = (direction) => {
    const newDate = new Date(currentDate);
    newDate.setMonth(currentDate.getMonth() + direction);
    setCurrentDate(newDate);
  };

  const CalendarView = () => {
    const daysInMonth = getDaysInMonth(currentDate);
    const firstDay = getFirstDayOfMonth(currentDate);
    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

    const calendarDays = [];
    for (let i = 0; i < firstDay; i++) calendarDays.push(null);
    for (let day = 1; day <= daysInMonth; day++) calendarDays.push(day);

    return (
      <div className="bg-white rounded-2xl shadow-sm">
        <div className="px-8 py-6 flex items-center justify-between">
          <h3 className="text-xl font-semibold text-gray-900">Job Calendar</h3>
          <div className="flex items-center gap-4">
            <button type="button" onClick={() => navigateMonth(-1)} className="p-2 hover:bg-gray-100 rounded-lg"><ChevronLeft className="h-5 w-5 text-gray-600" /></button>
            <span className="text-lg font-medium text-gray-900 min-w-[180px] text-center">{monthNames[currentDate.getMonth()]} {currentDate.getFullYear()}</span>
            <button type="button" onClick={() => navigateMonth(1)} className="p-2 hover:bg-gray-100 rounded-lg"><ChevronRight className="h-5 w-5 text-gray-600" /></button>
          </div>
        </div>
        <div className="px-6 pb-8">
          <div className="grid grid-cols-7 gap-1 mb-2">
            {dayNames.map(day => <div key={day}" className="text-sm font-medium text-gray-500 p-3 text-center">{day}</div>)}
            </div>
            <div className="grid grid-cols-7 gap-1">
              {calendarDays.map((day, index) => {
                if (!day) return <div key={index} className="h-28"></div>;
                const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);
                const dayJobs = getJobsForDate(date);
                const isToday = date.toDateString() === new Date().toDateString();
                return (
                  <div key={day}" className={`h-28 border rounded-lg p-2 ${isToday ? 'bg-blue-50 border-blue-200' : 'hover:bg-gray-50'}`}>
                    <div className="text-sm font-medium mb-2 ${isToday ? 'text-blue-600' : 'text-gray-900'}">{day}</div>
                    <div className="space-y-1">
                      {dayJobs.slice(0, 2).map(job => (
                        <div key={job.id} className="text-xs px-2 py-1 rounded-lg bg-blue-100 text-blue-700 cursor-pointer truncate" onClick={() => setShowjobDetails(job)}>
                          {job.title}
                        </div>
                      ))}
                      {dayJobs.length > 2 && <div className="text-xs text-gray-500 px-2">{+dayJobs.length - 2} more</div>}
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      );
    };

  const debouncedSearch = debounce((value) => setSearchTerm(value), 300);

  if (!user) return null;

  return (
    <div className="min-h-screen bg-gray-100">
      {showOnboarding && <OnboardingWizard onComplete={() => setShowOnboarding(false)} />}
      <div className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center items-between">
            <div class="flex items-center gap-4">
              <div className="p-4 w-2 bg-blue-500 rounded-lg">
                <Wrench className="h-6 w-6 text-white" />
                </div>
              </div>
              <h1 className="text-2xl font-semibold text-gray-900">TradeCRM</h1>
            <div class="flex items-center gap-2">
              <span className="text-sm text-gray-600">{businessProfile?.businessName || 'My Business'}</span>
              <button type="button" onClick={() => signOut(auth)} className="text-blue-600 hover:text-blue-700 text-sm font-medium">Logout</button>
            </div>
          </div>
        </div>
      </div>

      <div className="bg-white shadow-sm sticky top-0 z-40">
        <div class="max-w-7xl mx-auto">
          <nav className="flex space-x-1">
            {[
              { id: 'customers', label: 'Customers', icon: Customers },
              { id: 'jobs', label: 'Jobs', icon: Calendar },
              { id: 'quotes', label: 'Quotes', icon: Quote },
              { id: 'invoices', label: 'Invoices', icon: FileText },
            ].map(item => (
              <button
                key={item.id}
                type="button"
                onClick={() => setActiveTab(item.id)}
                className={`flex items-center gap-2 px-4 py-4 font-medium text-sm transition-colors relative
                  ${activeTab === item.id ? 'text-blue-600' : 'text-gray-600 hover:text-gray-900'}`}
                >
                <item.icon className="h-4 w-4" />
                {item.label}
                  {activeTab === item.id && <div className="flex absolute bottom-0 right-0 left h-0">
- .5 bg-blue-600"></div>}
                </button>
              ))}
            </div>
          </nav>
        ))}
</div>

<div className="max-w-7xl mx-auto px-6 py-8">
  <div class="flex flex-col sm:flex-row gap-4 mb-6">
    <div class="relative" className="flex-1 relative">
      <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
      <input type="text"
        placeholder={`Search ${activeTab}...`}
        className="w-full pl-12 pr-4 py-3 bg-white border border-gray-200 rounded-md focus:border-blue-500 focus:ring-blue-500/10 outline-none"
        onChange={(e) => debouncedSearch(e.target.value)}
      />
    </div>
    {activeTab === 'jobs' && (
      <div className="flex bg-gray-100 rounded-lg p-1">
        <button type="button" onClick={() => setJobView('list')} className={`px-4 py-2 rounded-lg flex items-center gap-2 ${jobView === 'list' ? 'bg-white text-gray-900 shadow-sm' : 'text-gray-600 hover:text-gray-900'}`}>
          <List className="h-4 w-4" /> List
        </button>
        <button type="button" onClick={() => setJobView('calendar')} className={`px-4 py-2 rounded-lg flex items-center gap-2 ${jobView === 'calendar' ? 'bg-white text-gray-900 shadow-sm' : 'text-gray-600 hover:text-gray-900'}`}>
          <Grid className="h-4 w-4" /> Calendar
        </button>
      </div>
    )}
    <button type="button"
      onClick={() => {
        if (activeTab === 'customers') setShowAddCustomer(true);
        else if (activeTab === 'jobs') setShowAddJob(true);
        else if (activeTab === 'quotes') setShowAddQuote(true);
        else setShowAddInvoice(true);
      }}
      className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2 font-semibold"
    >
      <Plus className="h-5 w-5" /> Add {activeTab.charAt(0).toUpperCase() + activeTab.slice(1, -1)}
    </button>
  </div>

  {activeTab === 'customers' && (
    <div className="space-y-4">
      {filteredCustomers.map(customer => (
        <div key={customer.id} className="bg-white rounded-lg shadow-sm p-6 hover:bg-gray-50 transition-colors">
          <div className="flex items-start justify-between">
            <div className="flex-1">
              <div className="flex items-center gap-3 mb-3">
                <h3 className="text-lg font-semibold text-gray-900">{customer.name}</h3>
                <span className={`px-3 py-1 rounded-full text-xs font-medium ${customer.customerType === 'Commercial' ? 'bg-blue-600 text-blue-100' : 'bg-green-600 text-green-100'}`}>
                  ${customer.customerType}
                </span>
                ${customer.notes && <span className="px-3 py-1 bg-gray-200 text-gray-900 rounded-full text-xs font-medium">Notes</span>}
              </div>
              <div className="space-y-2 text-sm text-gray-600">
                <div className="flex items-center gap-2"><Phone className="h-4 w-4 text-gray-400" />${customer.phone}</div>
                <div className="flex items-center gap-2"><MapPin className="h-4 w-4 text-gray-400" />${customer.address}</div>
              </div>
              ${customer.notes && (
                <div className="mt-3 text-sm text-gray-700 bg-gray-50 rounded-lg p-3 border border-gray-200">
                  ${customer.notes.substring(0, 100)}${customer.notes.length > 100 ? '...' : ''}
                </div>
              )}
            </div>
          </div>
          <div className="mt-4 pt-4 border-t">
            <button type="button" onClick={() => setShowCustomerDetails(customer)} className="text-sm text-blue-600 hover:text-blue-700 font-semibold">View Details</button>
          </div>
        </div>
      ))}
    </div>
  )}

  {activeTab === 'jobs' && jobView === 'calendar' && <CalendarView />}

  {activeTab === 'jobs' && jobView === 'list' && (
    <div className="space-y-4">
      {filteredJobs.map(job => (
        <div key={job.id} className="bg-white rounded-lg shadow-sm p-6 hover:bg-gray-50 transition">
          <div className="flex items-start justify-between mb-4">
            <div className="flex-1">
              <div className="flex items-center gap-3 mb-2">
                <h3 className="text-lg font-semibold text-gray-900">{job.title}</h3>
              </div>
              <p className="text-sm text-gray-600 mb-3">${job.description}</p>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
                <div className="flex items-center gap-2"><Users className="h-4 w-4 text-gray-400" />${job.customerName}</div>
                <div className="flex items-center gap-2"><Calendar className="h-4 w-4 text-gray-400" />${new Date(job.scheduledDate).toLocaleDateString()}</div>
                <div className="flex items-center gap-2"><DollarSign className="h-4 w-4 text-gray-400" />$${job.estimatedCost} estimated</div>
                <div className="flex items-center gap-2"><MapPin className="h-4 w-4 text-gray-400" />${job.address}</div>
              </div>
            </div>
          </div>
          <div className="pt-3 border-t">
            <button type="button" onClick={() => setShowJobDetails(job)} className="text-sm text-blue-600 hover:text-blue-700 font-semibold">Manage Job</button>
          </div>
        </div>
      ))}
    </div>
  )}

  {activeTab === 'quotes' && (
    <div className="space-y-4">
      {filteredQuotes.map(quote => (
        <div key={quote.id}" className="bg-white shadow-sm p-4 rounded-lg hover:bg-gray-50 transition-colors">
          <div className="flex justify-between mb-4 items-start">
            <div className="flex-1">
              <div className="flex gap-3 mb-3 items-center">
                <h3 className="text-lg text-gray-900 font-semibold">Quote #{quote.id}</h3>
                <span className={`px-3 py-1 rounded-full font-medium text-xs border ${getStatusColor(quote.status)}}`)}>{quote.status}</span>
              </div>
              <p className="text-gray-600 mb-3 text-sm">{quote.description}</p>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm text-gray-600">
                <div className="flex gap-2 items-center"><Users className="h-4 w-4 text-gray-400" />{quote.customerName}</div>
                <div className="flex gap-2 items-center"><MapPin className="h-4 w-4 text-gray-400" />{quote.customerAddress}</div>
                <div className="flex gap-2 items-center"><Calendar className="h-4 w-4 text-gray-400" />Expires: {new Date(quote.expiryDate.toLocaleDateString())}</div>
                <div className="flex gap-2 items-center"><DollarSign className="h-4 w-4 text-gray-400" />${quoteAmount.toFixed(2)}</div>
              </div>
            </div>
          </div>
          <div className="pt-3 border-t">
            <button type="button" onClick={() => setShowQuoteDetails(quote)} className="text-sm text-blue-600 hover:text-blue-700 font-semibold">View Details</button>
          </div>
        </div>
