import React, { useState, useEffect, useCallback } from "react";
import {
  Users,
  Calendar,
  FileText,
  Plus,
  Phone,
  MapPin,
  DollarSign,
  Receipt,
  Send,
  CheckCircle,
  Search,
  Trash2,
  Edit,
  Download,
  X,
  Quote,
  Mail,
  AlertCircle,
  AlertTriangle,
  LogOut,
  BarChart3,
  List,
  Grid,
  Clock,
  Wrench,
  Settings,
} from "lucide-react";

// Mock authentication
const mockAuth = {
  currentUser: { email: "john@plumbingpro.com" },
  signOut: () => console.log("Logged out"),
};

const TradesCRM = () => {
  // App states
  const [isAuthenticated, setIsAuthenticated] = useState(true);
  const [businessProfile, setBusinessProfile] = useState(null);
  const [activeTab, setActiveTab] = useState("dashboard");
  const [searchTerm, setSearchTerm] = useState("");
  const [jobView, setJobView] = useState("list");
  const [currentDate, setCurrentDate] = useState(new Date());
  const [showOnboarding, setShowOnboarding] = useState(
    !localStorage.getItem("businessProfile")
  );

  // Modal states
  const [showAddCustomer, setShowAddCustomer] = useState(false);
  const [showAddJob, setShowAddJob] = useState(false);
  const [showAddInvoice, setShowAddInvoice] = useState(false);
  const [showAddQuote, setShowAddQuote] = useState(false);
  const [showCustomerDetails, setShowCustomerDetails] = useState(null);
  const [showJobDetails, setShowJobDetails] = useState(null);
  const [showQuoteDetails, setShowQuoteDetails] = useState(null);
  const [showInvoiceDetails, setShowInvoiceDetails] = useState(null);
  const [selectedJobForInvoice, setSelectedJobForInvoice] = useState(null);
  const [showSettings, setShowSettings] = useState(false);

  // Notification system
  const [notifications, setNotifications] = useState([]);

  // Data states with sample data
  const [customers, setCustomers] = useState([
    {
      id: 1,
      name: "John Smith",
      phone: "(555) 123-4567",
      address: "123 Main St, Chicago, IL",
      customerType: "Residential",
      email: "john.smith@example.com",
      lastJob: "2024-06-15",
      notes: "Prefers morning appointments. Has two dogs. Gate code: 1234",
      totalSpent: 1850,
      jobHistory: [
        {
          jobId: 1,
          date: "2024-05-15",
          title: "Sink Repair",
          amount: 185,
          status: "Paid",
        },
        {
          jobId: 3,
          date: "2024-04-10",
          title: "Heater Installation",
          amount: 1200,
          status: "Paid",
        },
        {
          jobId: 5,
          date: "2024-03-20",
          title: "Cleaning",
          amount: 465,
          status: "Paid",
        },
      ],
    },
    {
      id: 2,
      name: "ABC Restaurant",
      phone: "(555) 987-6543",
      address: "456 Business Ave, Chicago, IL",
      customerType: "Commercial",
      email: "manager@abcrestaurant.com",
      lastJob: "2024-06-01",
      notes: "Monthly service contract. Contact manager Sarah for access.",
      totalSpent: 4200,
      jobHistory: [
        {
          jobId: 2,
          date: "2024-06-01",
          title: "Grease Trap Cleaning",
          amount: 350,
          status: "Paid",
        },
      ],
    },
  ]);

  const [jobs, setJobs] = useState([
    {
      id: 1,
      customerId: 1,
      customerName: "John Smith",
      title: "Sink Repair",
      description: "Fix leaking kitchen sink and replace faucet",
      status: "Scheduled",
      priority: "High",
      scheduledDate: "2024-06-30",
      estimatedHours: 2,
      estimatedCost: 185,
      address: "123 Main St, Chicago, IL",
      isRecurring: false,
      photos: [],
      timeTracking: {
        startTime: null,
        endTime: null,
        totalHours: 0,
        isActive: false,
      },
    },
    {
      id: 2,
      customerId: 2,
      customerName: "ABC Restaurant",
      title: "Grease Trap Cleaning",
      description: "Monthly grease trap cleaning",
      status: "Scheduled",
      priority: "Medium",
      scheduledDate: "2024-06-15",
      estimatedHours: 2,
      estimatedCost: 350,
      address: "456 Business Ave, Chicago, IL",
      isRecurring: true,
      recurringFrequency: "monthly",
      photos: [],
      timeTracking: {
        startTime: null,
        endTime: null,
        totalHours: 0,
        isActive: false,
      },
    },
  ]);

  const [invoices, setInvoices] = useState([
    {
      id: 1,
      jobId: 1,
      customerId: 1,
      customerName: "John Smith",
      customerAddress: "123 Main St, Chicago, IL",
      description: "Invoice for Sink Repair",
      status: "Pending",
      issueDate: "2024-06-01",
      dueDate: "2024-06-15",
      items: [
        {
          description: "Sink Repair Service",
          quantity: 1,
          rate: 100,
          amount: 100,
        },
        { description: "New Faucet", quantity: 1, rate: 85, amount: 85 },
      ],
      subtotal: 185,
      tax: 18.5,
      amount: 203.5,
    },
  ]);

  const [quotes, setQuotes] = useState([
    {
      id: 1,
      customerId: 1,
      customerName: "John Smith",
      customerAddress: "123 Main St, Chicago, IL",
      description: "Quote for Bathroom Renovation",
      status: "Draft",
      issueDate: "2024-06-01",
      expiryDate: "2024-07-01",
      items: [
        { description: "Demolition", quantity: 1, rate: 500, amount: 500 },
        { description: "New Fixtures", quantity: 1, rate: 1000, amount: 1000 },
      ],
      subtotal: 1500,
      tax: 150,
      amount: 1650,
    },
  ]);

  // Notification handler
  const addNotification = useCallback((type, message) => {
    const newNotification = { id: Date.now(), type, message };
    setNotifications(prev => [...prev, newNotification]);
    setTimeout(
      () =>
        setNotifications(prev => prev.filter(n => n.id !== newNotification.id)),
      5000
    );
  }, []);

  // Utility functions
  const getStatusColor = status => {
    switch (status.toLowerCase()) {
      case "completed":
      case "paid":
      case "accepted":
        return "bg-emerald-100 text-emerald-700 border-emerald-200";
      case "in progress":
      case "sent":
        return "bg-blue-100 text-blue-700 border-blue-200";
      case "scheduled":
      case "draft":
        return "bg-gray-100 text-gray-700 border-gray-200";
      case "overdue":
        return "bg-red-100 text-red-700 border-red-200";
      case "pending":
        return "bg-yellow-100 text-yellow-700 border-yellow-200";
      default:
        return "bg-gray-100 text-gray-700 border-gray-200";
    }
  };

  const getPriorityDot = priority => {
    switch (priority.toLowerCase()) {
      case "urgent":
      case "high":
        return "bg-red-500";
      case "medium":
        return "bg-yellow-500";
      default:
        return "bg-green-500";
    }
  };

  // Handlers
  const addCustomer = formData => {
    const newCustomer = {
      ...formData,
      id: customers.length + 1,
      totalSpent: 0,
      jobHistory: [],
    };
    setCustomers(prev => [...prev, newCustomer]);
    setShowAddCustomer(false);
    addNotification("success", "Customer added successfully");
  };

  const addJob = formData => {
    const customer = customers.find(
      c => c.id === parseInt(formData.customerId)
    );
    const newJob = {
      ...formData,
      id: jobs.length + 1,
      customerName: customer.name,
      photos: [],
      timeTracking: {
        startTime: null,
        endTime: null,
        totalHours: 0,
        isActive: false,
      },
    };
    setJobs(prev => [...prev, newJob]);
    setShowAddJob(false);
    addNotification("success", "Job scheduled successfully");
  };

  const addQuote = formData => {
    const customer = customers.find(
      c => c.id === parseInt(formData.customerId)
    );
    const newQuote = {
      ...formData,
      id: quotes.length + 1,
      customerName: customer.name,
      customerAddress: customer.address,
    };
    setQuotes(prev => [...prev, newQuote]);
    setShowAddQuote(false);
    addNotification("success", "Quote created successfully");
  };

  const addInvoice = formData => {
    const customer = customers.find(
      c => c.id === parseInt(formData.customerId)
    );
    const newInvoice = {
      ...formData,
      id: invoices.length + 1,
      customerName: customer.name,
      customerAddress: customer.address,
    };
    setInvoices(prev => [...prev, newInvoice]);
    setShowAddInvoice(false);
    setSelectedJobForInvoice(null);
    addNotification("success", "Invoice created successfully");
  };

  const createInvoiceFromJob = job => {
    setSelectedJobForInvoice(job);
    setShowAddInvoice(true);
  };

  const emailQuote = quoteId =>
    addNotification("info", `Sending quote ${quoteId} via email`);
  const emailInvoice = invoiceId =>
    addNotification("info", `Sending invoice ${invoiceId} via email`);
  const generatePDF = (type, data) =>
    addNotification("info", `Generating ${type} PDF for ${data.id}`);

  const markInvoicePaid = (invoiceId, paymentMethod) => {
    setInvoices(prev =>
      prev.map(invoice =>
        invoice.id === invoiceId
          ? {
              ...invoice,
              status: "Paid",
              paidDate: new Date().toISOString(),
              paymentMethod,
            }
          : invoice
      )
    );
    addNotification("success", `Invoice ${invoiceId} marked as paid`);
  };

  const handleOnboardingComplete = () => {
    setShowOnboarding(false);
  };

  // Components
  const OnboardingWizard = ({ onComplete }) => {
    const [step, setStep] = useState(1);
    const [profile, setProfile] = useState({
      businessName: "",
      businessType: "Plumbing",
      address: "",
      phone: "",
      email: "",
      license: "",
      services: [],
    });

    const handleComplete = () => {
      localStorage.setItem("businessProfile", JSON.stringify(profile));
      setBusinessProfile(profile);
      onComplete();
    };

    return (
      <div className="fixed inset-0 bg-gray-900/50 backdrop-blur-sm flex items-center justify-center p-4 z-50">
        <div className="bg-white rounded-2xl shadow-xl p-8 w-full max-w-md">
          <div className="mb-6">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-semibold text-gray-800">
                Welcome to TradesCRM
              </h2>
              <span className="text-sm font-medium text-gray-500">
                Step {step} of 3
              </span>
            </div>
            <div className="flex gap-2">
              {[1, 2, 3].map(i => (
                <div
                  key={i}
                  className={`flex-1 h-2 rounded-full ${
                    i <= step ? "bg-blue-600" : "bg-gray-200"
                  }`}
                />
              ))}
            </div>
          </div>

          {step === 1 && (
            <div className="space-y-4">
              <h3 className="text-lg font-medium text-gray-800">
                Business Information
              </h3>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Business Name
                </label>
                <input
                  type="text"
                  value={profile.businessName}
                  onChange={e =>
                    setProfile({ ...profile, businessName: e.target.value })
                  }
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                  placeholder="ABC Plumbing Co."
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Business Type
                </label>
                <select
                  value={profile.businessType}
                  onChange={e =>
                    setProfile({ ...profile, businessType: e.target.value })
                  }
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                >
                  <option value="Plumbing">Plumbing</option>
                  <option value="Electrical">Electrical</option>
                  <option value="HVAC">HVAC</option>
                  <option value="General">General Contractor</option>
                  <option value="Other">Other</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Address
                </label>
                <input
                  type="text"
                  value={profile.address}
                  onChange={e =>
                    setProfile({ ...profile, address: e.target.value })
                  }
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                  placeholder="123 Business Rd, Chicago, IL"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  License Number
                </label>
                <input
                  type="text"
                  value={profile.license}
                  onChange={e =>
                    setProfile({ ...profile, license: e.target.value })
                  }
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                  placeholder="LIC123456"
                />
              </div>
              <button
                onClick={() => setStep(2)}
                className="w-full bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-600 transition-colors font-medium"
              >
                Next
              </button>
            </div>
          )}

          {step === 2 && (
            <div className="space-y-4">
              <h3 className="text-lg font-medium text-gray-800">
                Contact Information
              </h3>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Phone Number
                </label>
                <input
                  type="tel"
                  value={profile.phone}
                  onChange={e =>
                    setProfile({ ...profile, phone: e.target.value })
                  }
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                  placeholder="(555) 123-4567"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Email Address
                </label>
                <input
                  type="email"
                  value={profile.email}
                  onChange={e =>
                    setProfile({ ...profile, email: e.target.value })
                  }
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                  placeholder="info@abcplumbing.com"
                />
              </div>
              <div className="flex gap-3">
                <button
                  onClick={() => setStep(1)}
                  className="flex-1 bg-gray-100 text-gray-700 py-2 rounded-lg hover:bg-gray-200 transition-colors font-medium"
                >
                  Back
                </button>
                <button
                  onClick={() => setStep(3)}
                  className="flex-1 bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-600 transition-colors font-medium"
                >
                  Next
                </button>
              </div>
            </div>
          )}

          {step === 3 && (
            <div className="space-y-4">
              <h3 className="text-lg font-medium text-gray-800">
                Services Offered
              </h3>
              <div className="space-y-2">
                {[
                  "Emergency Repairs",
                  "Installation",
                  "Maintenance",
                  "Consultation",
                  "Inspection",
                ].map(service => (
                  <label key={service} className="flex items-center gap-3">
                    <input
                      type="checkbox"
                      checked={profile.services.includes(service)}
                      onChange={e => {
                        if (e.target.checked) {
                          setProfile({
                            ...profile,
                            services: [...profile.services, service],
                          });
                        } else {
                          setProfile({
                            ...profile,
                            services: profile.services.filter(
                              s => s !== service
                            ),
                          });
                        }
                      }}
                      className="w-5 h-5 text-blue-500 rounded focus:ring-2 focus:ring-blue-500"
                    />
                    <span className="text-gray-700">{service}</span>
                  </label>
                ))}
              </div>
              <div className="flex gap-3">
                <button
                  onClick={() => setStep(2)}
                  className="flex-1 bg-gray-100 text-gray-700 py-2 rounded-lg hover:bg-gray-200 transition-colors font-medium"
                >
                  Back
                </button>
                <button
                  onClick={handleComplete}
                  className="flex-1 bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-600 transition-colors font-medium"
                >
                  Complete Setup
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    );
  };

  const CustomerForm = ({ onSubmit, onCancel }) => {
    const [formData, setFormData] = useState({
      name: "",
      email: "",
      phone: "",
      address: "",
      customerType: "Residential",
      notes: "",
    });

    const handleSubmit = () => {
      if (formData.name && formData.email) {
        onSubmit(formData);
        setFormData({
          name: "",
          email: "",
          phone: "",
          address: "",
          customerType: "Residential",
          notes: "",
        });
      } else {
        addNotification("error", "Name and email are required");
      }
    };

    return (
      <div className="fixed inset-0 bg-black/30 backdrop-blur-sm flex items-center justify-center p-4 z-50">
        <div className="bg-white rounded-2xl shadow-xl p-6 w-full max-w-md">
          <h3 className="text-xl font-semibold text-gray-900 mb-6">
            Add New Customer
          </h3>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Name
              </label>
              <input
                type="text"
                value={formData.name}
                onChange={e =>
                  setFormData({ ...formData, name: e.target.value })
                }
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Email
              </label>
              <input
                type="email"
                value={formData.email}
                onChange={e =>
                  setFormData({ ...formData, email: e.target.value })
                }
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Phone
              </label>
              <input
                type="tel"
                value={formData.phone}
                onChange={e =>
                  setFormData({ ...formData, phone: e.target.value })
                }
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Address
              </label>
              <input
                type="text"
                value={formData.address}
                onChange={e =>
                  setFormData({ ...formData, address: e.target.value })
                }
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Customer Type
              </label>
              <select
                value={formData.customerType}
                onChange={e =>
                  setFormData({ ...formData, customerType: e.target.value })
                }
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
              >
                <option value="Residential">Residential</option>
                <option value="Commercial">Commercial</option>
                <option value="Industrial">Industrial</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Notes
              </label>
              <textarea
                value={formData.notes}
                onChange={e =>
                  setFormData({ ...formData, notes: e.target.value })
                }
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                rows={3}
              />
            </div>
            <div className="flex gap-3 pt-4">
              <button
                onClick={handleSubmit}
                className="flex-1 bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-600 transition-colors font-medium"
              >
                Add Customer
              </button>
              <button
                onClick={onCancel}
                className="flex-1 bg-gray-100 text-gray-700 py-2 rounded-lg hover:bg-gray-200 transition-colors font-medium"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const JobForm = ({ onSubmit, onCancel }) => {
    const [formData, setFormData] = useState({
      customerId: "",
      title: "",
      description: "",
      status: "Scheduled",
      priority: "Medium",
      scheduledDate: "",
      estimatedHours: "",
      estimatedCost: "",
      address: "",
      isRecurring: false,
      recurringFrequency: "monthly",
    });

    const handleSubmit = () => {
      if (formData.customerId && formData.title && formData.scheduledDate) {
        onSubmit(formData);
      } else {
        addNotification(
          "error",
          "Customer, title, and scheduled date are required"
        );
      }
    };

    return (
      <div className="fixed inset-0 bg-black/30 backdrop-blur-sm flex items-center justify-center p-4 z-50">
        <div className="bg-white rounded-2xl shadow-xl p-6 w-full max-w-lg max-h-[90vh] overflow-y-auto">
          <h3 className="text-xl font-semibold text-gray-900 mb-6">
            Schedule New Job
          </h3>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Customer
              </label>
              <select
                value={formData.customerId}
                onChange={e =>
                  setFormData({ ...formData, customerId: e.target.value })
                }
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
              >
                <option value="">Select a customer</option>
                {customers.map(customer => (
                  <option key={customer.id} value={customer.id}>
                    {customer.name} - {customer.customerType}
                  </option>
                ))}
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Job Title
              </label>
              <input
                type="text"
                value={formData.title}
                onChange={e =>
                  setFormData({ ...formData, title: e.target.value })
                }
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Description
              </label>
              <textarea
                value={formData.description}
                onChange={e =>
                  setFormData({ ...formData, description: e.target.value })
                }
                rows={3}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
              />
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Status
                </label>
                <select
                  value={formData.status}
                  onChange={e =>
                    setFormData({ ...formData, status: e.target.value })
                  }
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                >
                  <option value="Scheduled">Scheduled</option>
                  <option value="In Progress">In Progress</option>
                  <option value="Completed">Completed</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Priority
                </label>
                <select
                  value={formData.priority}
                  onChange={e =>
                    setFormData({ ...formData, priority: e.target.value })
                  }
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                >
                  <option value="Low">Low</option>
                  <option value="Medium">Medium</option>
                  <option value="High">High</option>
                  <option value="Urgent">Urgent</option>
                </select>
              </div>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Scheduled Date
              </label>
              <input
                type="date"
                value={formData.scheduledDate}
                onChange={e =>
                  setFormData({ ...formData, scheduledDate: e.target.value })
                }
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
              />
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Estimated Hours
                </label>
                <input
                  type="number"
                  step="0.5"
                  value={formData.estimatedHours}
                  onChange={e =>
                    setFormData({ ...formData, estimatedHours: e.target.value })
                  }
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Estimated Cost
                </label>
                <input
                  type="number"
                  step="0.01"
                  value={formData.estimatedCost}
                  onChange={e =>
                    setFormData({ ...formData, estimatedCost: e.target.value })
                  }
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                />
              </div>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Job Address
              </label>
              <input
                type="text"
                value={formData.address}
                onChange={e =>
                  setFormData({ ...formData, address: e.target.value })
                }
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
              />
            </div>
            <div className="flex items-center gap-3">
              <input
                type="checkbox"
                checked={formData.isRecurring}
                onChange={e =>
                  setFormData({ ...formData, isRecurring: e.target.checked })
                }
                className="w-5 h-5 text-blue-500 rounded focus:ring-2 focus:ring-blue-500"
              />
              <label className="text-sm font-medium text-gray-700">
                Recurring Job
              </label>
            </div>
            {formData.isRecurring && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Recurring Frequency
                </label>
                <select
                  value={formData.recurringFrequency}
                  onChange={e =>
                    setFormData({
                      ...formData,
                      recurringFrequency: e.target.value,
                    })
                  }
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                >
                  <option value="weekly">Weekly</option>
                  <option value="monthly">Monthly</option>
                  <option value="quarterly">Quarterly</option>
                </select>
              </div>
            )}
            <div className="flex gap-3 pt-4">
              <button
                onClick={handleSubmit}
                className="flex-1 bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-600 transition-colors font-medium"
              >
                Schedule Job
              </button>
              <button
                onClick={onCancel}
                className="flex-1 bg-gray-100 text-gray-700 py-2 rounded-lg hover:bg-gray-200 transition-colors font-medium"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const QuoteForm = ({ onSubmit, onCancel }) => {
    const [formData, setFormData] = useState({
      customerId: "",
      description: "",
      status: "Draft",
      issueDate: new Date().toISOString().split("T")[0],
      expiryDate: "",
      items: [{ description: "", quantity: 1, rate: 0 }],
      subtotal: 0,
      tax: 0,
      amount: 0,
    });

    const handleAddItem = () => {
      setFormData({
        ...formData,
        items: [...formData.items, { description: "", quantity: 1, rate: 0 }],
      });
    };

    const handleItemChange = (index, field, value) => {
      const updatedItems = formData.items.map((item, i) =>
        i === index ? { ...item, [field]: value } : item
      );
      setFormData({ ...formData, items: updatedItems });
    };

    const handleRemoveItem = index => {
      setFormData({
        ...formData,
        items: formData.items.filter((_, i) => i !== index),
      });
    };

    useEffect(() => {
      const subtotal = formData.items.reduce(
        (sum, item) => sum + item.quantity * item.rate,
        0
      );
      const tax = subtotal * 0.1;
      const amount = subtotal + tax;
      setFormData(prev => ({ ...prev, subtotal, tax, amount }));
    }, [formData.items]);

    const handleSubmit = () => {
      if (formData.customerId && formData.description && formData.expiryDate) {
        onSubmit(formData);
      } else {
        addNotification("error", "Please fill in all required fields");
      }
    };

    return (
      <div className="fixed inset-0 bg-black/30 backdrop-blur-sm flex items-center justify-center p-4 z-50">
        <div className="bg-white rounded-2xl shadow-xl p-6 w-full max-w-lg max-h-[90vh] overflow-y-auto">
          <h3 className="text-xl font-semibold text-gray-900 mb-6">
            Create New Quote
          </h3>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Customer
              </label>
              <select
                value={formData.customerId}
                onChange={e =>
                  setFormData({ ...formData, customerId: e.target.value })
                }
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
              >
                <option value="">Select a customer</option>
                {customers.map(customer => (
                  <option key={customer.id} value={customer.id}>
                    {customer.name} - {customer.customerType}
                  </option>
                ))}
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Description
              </label>
              <textarea
                value={formData.description}
                onChange={e =>
                  setFormData({ ...formData, description: e.target.value })
                }
                rows={3}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Status
              </label>
              <select
                value={formData.status}
                onChange={e =>
                  setFormData({ ...formData, status: e.target.value })
                }
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
              >
                <option value="Draft">Draft</option>
                <option value="Sent">Sent</option>
                <option value="Accepted">Accepted</option>
              </select>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Issue Date
                </label>
                <input
                  type="date"
                  value={formData.issueDate}
                  onChange={e =>
                    setFormData({ ...formData, issueDate: e.target.value })
                  }
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Expiry Date
                </label>
                <input
                  type="date"
                  value={formData.expiryDate}
                  onChange={e =>
                    setFormData({ ...formData, expiryDate: e.target.value })
                  }
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                />
              </div>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Items
              </label>
              {formData.items.map((item, index) => (
                <div key={index} className="flex gap-2 mb-2">
                  <input
                    type="text"
                    placeholder="Description"
                    value={item.description}
                    onChange={e =>
                      handleItemChange(index, "description", e.target.value)
                    }
                    className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                  />
                  <input
                    type="number"
                    placeholder="Qty"
                    value={item.quantity}
                    onChange={e =>
                      handleItemChange(
                        index,
                        "quantity",
                        parseInt(e.target.value)
                      )
                    }
                    className="w-20 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                  />
                  <input
                    type="number"
                    placeholder="Rate"
                    value={item.rate}
                    onChange={e =>
                      handleItemChange(
                        index,
                        "rate",
                        parseFloat(e.target.value)
                      )
                    }
                    className="w-24 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                  />
                  <button
                    onClick={() => handleRemoveItem(index)}
                    className="p-2 text-red-600 hover:bg-red-100 rounded-lg"
                  >
                    <Trash2 className="h-5 w-5" />
                  </button>
                </div>
              ))}
              <button
                onClick={handleAddItem}
                className="mt-2 text-sm text-blue-600 hover:text-blue-700 font-medium flex items-center gap-1"
              >
                <Plus className="h-4 w-4" /> Add Item
              </button>
            </div>
            <div className="border-t pt-4">
              <div className="flex justify-between text-sm text-gray-600">
                <span>Subtotal</span>
                <span>${formData.subtotal.toFixed(2)}</span>
              </div>
              <div className="flex justify-between text-sm text-gray-600 mt-1">
                <span>Tax (10%)</span>
                <span>${formData.tax.toFixed(2)}</span>
              </div>
              <div className="flex justify-between text-sm font-semibold text-gray-900 mt-2">
                <span>Total</span>
                <span>${formData.amount.toFixed(2)}</span>
              </div>
            </div>
            <div className="flex gap-3 pt-4">
              <button
                onClick={handleSubmit}
                className="flex-1 bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-600 transition-colors font-medium"
              >
                Create Quote
              </button>
              <button
                onClick={onCancel}
                className="flex-1 bg-gray-100 text-gray-700 py-2 rounded-lg hover:bg-gray-200 transition-colors font-medium"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const InvoiceForm = ({ onSubmit, onCancel, selectedJob }) => {
    const [formData, setFormData] = useState({
      jobId: selectedJob?.id || "",
      customerId: selectedJob?.customerId || "",
      customerName: selectedJob?.customerName || "",
      customerAddress: selectedJob?.address || "",
      description: selectedJob ? `Invoice for ${selectedJob.title}` : "",
      status: "Pending",
      issueDate: new Date().toISOString().split("T")[0],
      dueDate: "",
      items: selectedJob
        ? [
            {
              description: selectedJob.title,
              quantity: 1,
              rate: selectedJob.estimatedCost,
            },
          ]
        : [{ description: "", quantity: 1, rate: 0 }],
      subtotal: selectedJob?.estimatedCost || 0,
      tax: selectedJob ? selectedJob.estimatedCost * 0.1 : 0,
      amount: selectedJob ? selectedJob.estimatedCost * 1.1 : 0,
    });

    const handleAddItem = () => {
      setFormData({
        ...formData,
        items: [...formData.items, { description: "", quantity: 1, rate: 0 }],
      });
    };

    const handleItemChange = (index, field, value) => {
      const updatedItems = formData.items.map((item, i) =>
        i === index ? { ...item, [field]: value } : item
      );
      setFormData({ ...formData, items: updatedItems });
    };

    const handleRemoveItem = index => {
      setFormData({
        ...formData,
        items: formData.items.filter((_, i) => i !== index),
      });
    };

    useEffect(() => {
      const subtotal = formData.items.reduce(
        (sum, item) => sum + item.quantity * item.rate,
        0
      );
      const tax = subtotal * 0.1;
      const amount = subtotal + tax;
      setFormData(prev => ({ ...prev, subtotal, tax, amount }));
    }, [formData.items]);

    const handleSubmit = () => {
      if (formData.customerId && formData.description && formData.dueDate) {
        onSubmit(formData);
      } else {
        addNotification("error", "Please fill in all required fields");
      }
    };

    return (
      <div className="fixed inset-0 bg-black/30 backdrop-blur-sm flex items-center justify-center p-4 z-50">
        <div className="bg-white rounded-2xl shadow-xl p-6 w-full max-w-lg max-h-[90vh] overflow-y-auto">
          <h3 className="text-xl font-semibold text-gray-900 mb-6">
            Create New Invoice
          </h3>
          <div className="space-y-4">
            {!selectedJob && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Job (Optional)
                </label>
                <select
                  value={formData.jobId}
                  onChange={e => {
                    const job = jobs.find(
                      j => j.id === parseInt(e.target.value)
                    );
                    setFormData({
                      ...formData,
                      jobId: job?.id || "",
                      customerId: job?.customerId || "",
                      customerName: job?.customerName || "",
                      customerAddress: job?.address || "",
                      description: job ? `Invoice for ${job.title}` : "",
                      items: job
                        ? [
                            {
                              description: job.title,
                              quantity: 1,
                              rate: job.estimatedCost,
                            },
                          ]
                        : [{ description: "", quantity: 1, rate: 0 }],
                      subtotal: job?.estimatedCost || 0,
                      tax: job ? job.estimatedCost * 0.1 : 0,
                      amount: job ? job.estimatedCost * 1.1 : 0,
                    });
                  }}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                >
                  <option value="">Select a job (optional)</option>
                  {jobs.map(job => (
                    <option key={job.id} value={job.id}>
                      {job.title} - {job.customerName}
                    </option>
                  ))}
                </select>
              </div>
            )}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Customer
              </label>
              <select
                value={formData.customerId}
                onChange={e => {
                  const customer = customers.find(
                    c => c.id === parseInt(e.target.value)
                  );
                  setFormData({
                    ...formData,
                    customerId: customer?.id || "",
                    customerName: customer?.name || "",
                    customerAddress: customer?.address || "",
                  });
                }}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                disabled={!!selectedJob}
              >
                <option value="">Select a customer</option>
                {customers.map(customer => (
                  <option key={customer.id} value={customer.id}>
                    {customer.name} - {customer.customerType}
                  </option>
                ))}
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Description
              </label>
              <textarea
                value={formData.description}
                onChange={e =>
                  setFormData({ ...formData, description: e.target.value })
                }
                rows={3}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Status
              </label>
              <select
                value={formData.status}
                onChange={e =>
                  setFormData({ ...formData, status: e.target.value })
                }
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
              >
                <option value="Pending">Pending</option>
                <option value="Paid">Paid</option>
                <option value="Overdue">Overdue</option>
              </select>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Issue Date
                </label>
                <input
                  type="date"
                  value={formData.issueDate}
                  onChange={e =>
                    setFormData({ ...formData, issueDate: e.target.value })
                  }
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Due Date
                </label>
                <input
                  type="date"
                  value={formData.dueDate}
                  onChange={e =>
                    setFormData({ ...formData, dueDate: e.target.value })
                  }
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                />
              </div>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Items
              </label>
              {formData.items.map((item, index) => (
                <div key={index} className="flex gap-2 mb-2">
                  <input
                    type="text"
                    placeholder="Description"
                    value={item.description}
                    onChange={e =>
                      handleItemChange(index, "description", e.target.value)
                    }
                    className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                  />
                  <input
                    type="number"
                    placeholder="Qty"
                    value={item.quantity}
                    onChange={e =>
                      handleItemChange(
                        index,
                        "quantity",
                        parseInt(e.target.value)
                      )
                    }
                    className="w-20 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                  />
                  <input
                    type="number"
                    placeholder="Rate"
                    value={item.rate}
                    onChange={e =>
                      handleItemChange(
                        index,
                        "rate",
                        parseFloat(e.target.value)
                      )
                    }
                    className="w-24 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                  />
                  <button
                    onClick={() => handleRemoveItem(index)}
                    className="p-2 text-red-600 hover:bg-red-100 rounded-lg"
                  >
                    <Trash2 className="h-5 w-5" />
                  </button>
                </div>
              ))}
              <button
                onClick={handleAddItem}
                className="mt-2 text-sm text-blue-600 hover:text-blue-700 font-medium flex items-center gap-1"
              >
                <Plus className="h-4 w-4" /> Add Item
              </button>
            </div>
            <div className="border-t pt-4">
              <div className="flex justify-between text-sm text-gray-600">
                <span>Subtotal</span>
                <span>${formData.subtotal.toFixed(2)}</span>
              </div>
              <div className="flex justify-between text-sm text-gray-600 mt-1">
                <span>Tax (10%)</span>
                <span>${formData.tax.toFixed(2)}</span>
              </div>
              <div className="flex justify-between text-sm font-semibold text-gray-900 mt-2">
                <span>Total</span>
                <span>${formData.amount.toFixed(2)}</span>
              </div>
            </div>
            <div className="flex gap-3 pt-4">
              <button
                onClick={handleSubmit}
                className="flex-1 bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-600 transition-colors font-medium"
              >
                Create Invoice
              </button>
              <button
                onClick={onCancel}
                className="flex-1 bg-gray-100 text-gray-700 py-2 rounded-lg hover:bg-gray-200 transition-colors font-medium"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const CustomerDetailsModal = ({ customer, onClose }) => {
    if (!customer) return null;

    return (
      <div className="fixed inset-0 bg-black/30 backdrop-blur-sm flex items-center justify-center p-4 z-50">
        <div className="bg-white rounded-2xl shadow-xl p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-2xl font-semibold text-gray-900">
              {customer.name}
            </h3>
            <button
              onClick={onClose}
              className="p-2 hover:bg-gray-100 rounded-xl transition-colors"
            >
              <X className="h-5 w-5 text-gray-500" />
            </button>
          </div>
          <div className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h4 className="text-sm font-medium text-gray-500 mb-3">
                  Contact Information
                </h4>
                <div className="space-y-2">
                  <div className="flex items-center gap-2">
                    <Phone className="h-4 w-4 text-gray-400" />
                    <span>{customer.phone}</span>
                  </div>
                  {customer.email && (
                    <div className="flex items-center gap-2">
                      <Mail className="h-4 w-4 text-gray-400" />
                      <span>{customer.email}</span>
                    </div>
                  )}
                  <div className="flex items-center gap-2">
                    <MapPin className="h-4 w-4 text-gray-400" />
                    <span>{customer.address}</span>
                  </div>
                </div>
              </div>
              <div>
                <h4 className="text-sm font-medium text-gray-500 mb-3">
                  Customer Details
                </h4>
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Type</span>
                    <span
                      className={`px-3 py-1 rounded-full text-xs font-medium ${
                        customer.customerType === "Commercial"
                          ? "bg-purple-100 text-purple-700"
                          : "bg-emerald-100 text-emerald-700"
                      }`}
                    >
                      {customer.customerType}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Total Spent</span>
                    <span className="font-semibold">
                      ${customer.totalSpent.toFixed(2)}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Total Jobs</span>
                    <span className="font-semibold">
                      {customer.jobHistory.length}
                    </span>
                  </div>
                </div>
              </div>
            </div>
            {customer.notes && (
              <div>
                <h4 className="text-sm font-medium text-gray-500 mb-3">
                  Notes
                </h4>
                <div className="bg-gray-50 rounded-xl p-4 border border-gray-200">
                  <p className="text-sm text-gray-700">{customer.notes}</p>
                </div>
              </div>
            )}
            <div>
              <h4 className="text-sm font-medium text-gray-500 mb-3">
                Job History
              </h4>
              <div className="space-y-2">
                {customer.jobHistory.map((job, index) => (
                  <div
                    key={index}
                    className="bg-gray-50 rounded-xl p-3 flex justify-between"
                  >
                    <div>
                      <p className="font-medium text-sm">{job.title}</p>
                      <p className="text-xs text-gray-500">
                        {new Date(job.date).toLocaleDateString()}
                      </p>
                    </div>
                    <div className="text-right">
                      <p className="font-semibold text-sm">
                        ${job.amount.toFixed(2)}
                      </p>
                      <span
                        className={`text-xs px-2 py-1 rounded-full font-medium ${getStatusColor(
                          job.status
                        )}`}
                      >
                        {job.status}
                      </span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
            <div className="flex gap-3">
              <button
                onClick={() => {
                  setShowAddJob(true);
                }}
                className="flex-1 bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-600 transition-colors font-medium"
              >
                Schedule Job
              </button>
              <button
                onClick={onClose}
                className="flex-1 bg-gray-100 text-gray-700 py-2 rounded-lg hover:bg-gray-200 transition-colors font-medium"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const JobDetailsModal = ({ job, onClose }) => {
    if (!job) return null;

    return (
      <div className="fixed inset-0 bg-black/30 backdrop-blur-sm flex items-center justify-center p-4 z-50">
        <div className="bg-white rounded-2xl shadow-xl p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-2xl font-semibold text-gray-900">
              {job.title}
            </h3>
            <button
              onClick={onClose}
              className="p-2 hover:bg-gray-100 rounded-xl transition-colors"
            >
              <X className="h-5 w-5 text-gray-500" />
            </button>
          </div>
          <div className="space-y-6">
            <div className="flex items-center gap-3">
              <span
                className={`px-3 py-1 rounded-full text-sm font-medium border ${getStatusColor(
                  job.status
                )}`}
              >
                {job.status}
              </span>
              <div className="flex items-center gap-2">
                <div
                  className={`w-2 h-2 rounded-full ${getPriorityDot(
                    job.priority
                  )}`}
                ></div>
                <span className="text-sm font-medium text-gray-600">
                  {job.priority}
                </span>
              </div>
            </div>
            <div>
              <h4 className="text-sm font-medium text-gray-500 mb-2">
                Description
              </h4>
              <p className="text-gray-700">{job.description}</p>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h4 className="text-sm font-medium text-gray-500 mb-3">
                  Job Information
                </h4>
                <div className="space-y-2">
                  <div className="flex items-center gap-2">
                    <Users className="h-4 w-4 text-gray-400" />
                    <span>
                      {customers.find(c => c.id === job.customerId)?.name}
                    </span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Calendar className="h-4 w-4 text-gray-400" />
                    <span>
                      {new Date(job.scheduledDate).toLocaleDateString()}
                    </span>
                  </div>
                  <div className="flex items-center gap-2">
                    <MapPin className="h-4 w-4 text-gray-400" />
                    <span>{job.address}</span>
                  </div>
                </div>
              </div>
              <div>
                <h4 className="text-sm font-medium text-gray-500 mb-3">
                  Time & Cost
                </h4>
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Estimated Hours</span>
                    <span className="font-medium">{job.estimatedHours}h</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Tracked Hours</span>
                    <span className="font-medium">
                      {job.timeTracking.totalHours.toFixed(1)}h
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Estimated Cost</span>
                    <span className="font-semibold">
                      ${job.estimatedCost.toFixed(2)}
                    </span>
                  </div>
                </div>
              </div>
            </div>
            <div className="flex gap-3">
              <button
                onClick={() => {
                  createInvoiceFromJob(job);
                  onClose();
                }}
                className="flex-1 bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-600 transition-colors font-medium"
              >
                Create Invoice
              </button>
              <button
                onClick={onClose}
                className="flex-1 bg-gray-100 text-gray-700 py-2 rounded-lg hover:bg-gray-200 transition-colors font-medium"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const QuoteDetailsModal = ({ quote, onClose }) => {
    if (!quote) return null;

    return (
      <div className="fixed inset-0 bg-black/30 backdrop-blur-sm flex items-center justify-center p-4 z-50">
        <div className="bg-white rounded-2xl shadow-xl p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-2xl font-semibold text-gray-900">
              Quote #{quote.id}
            </h3>
            <button
              onClick={onClose}
              className="p-2 hover:bg-gray-100 rounded-xl transition-colors"
            >
              <X className="h-5 w-5 text-gray-500" />
            </button>
          </div>
          <div className="space-y-6">
            <div className="flex items-center gap-3">
              <span
                className={`px-3 py-1 rounded-full text-sm font-medium border ${getStatusColor(
                  quote.status
                )}`}
              >
                {quote.status}
              </span>
            </div>
            <div>
              <h4 className="text-sm font-medium text-gray-500 mb-2">
                Description
              </h4>
              <p className="text-gray-700">{quote.description}</p>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h4 className="text-sm font-medium text-gray-500 mb-3">
                  Quote Information
                </h4>
                <div className="space-y-2">
                  <div className="flex items-center gap-2">
                    <Users className="h-4 w-4 text-gray-400" />
                    <span>{quote.customerName}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <MapPin className="h-4 w-4 text-gray-400" />
                    <span>{quote.customerAddress}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Calendar className="h-4 w-4 text-gray-400" />
                    <span>
                      Issued: {new Date(quote.issueDate).toLocaleDateString()}
                    </span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Calendar className="h-4 w-4 text-gray-400" />
                    <span>
                      Expires: {new Date(quote.expiryDate).toLocaleDateString()}
                    </span>
                  </div>
                </div>
              </div>
              <div>
                <h4 className="text-sm font-medium text-gray-500 mb-3">
                  Items
                </h4>
                <div className="space-y-2">
                  {quote.items.map((item, index) => (
                    <div key={index} className="flex justify-between text-sm">
                      <span>
                        {item.description} (x{item.quantity})
                      </span>
                      <span>${(item.quantity * item.rate).toFixed(2)}</span>
                    </div>
                  ))}
                </div>
                <div className="border-t mt-3 pt-3">
                  <div className="flex justify-between text-sm text-gray-600">
                    <span>Subtotal</span>
                    <span>${quote.subtotal.toFixed(2)}</span>
                  </div>
                  <div className="flex justify-between text-sm text-gray-600 mt-1">
                    <span>Tax (10%)</span>
                    <span>${quote.tax.toFixed(2)}</span>
                  </div>
                  <div className="flex justify-between text-sm font-semibold text-gray-900 mt-2">
                    <span>Total</span>
                    <span>${quote.amount.toFixed(2)}</span>
                  </div>
                </div>
              </div>
            </div>
            <div className="flex gap-3">
              <button
                onClick={() => emailQuote(quote.id)}
                className="flex-1 bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-600 transition-colors font-medium flex items-center justify-center gap-2"
              >
                <Send className="h-4 w-4" /> Send Quote
              </button>
              <button
                onClick={() => generatePDF("quote", quote)}
                className="flex-1 bg-gray-700 text-white py-2 rounded-lg hover:bg-gray-800 transition-colors font-medium flex items-center justify-center gap-2"
              >
                <Download className="h-4 w-4" /> Download PDF
              </button>
              <button
                onClick={onClose}
                className="flex-1 bg-gray-100 text-gray-700 py-2 rounded-lg hover:bg-gray-200 transition-colors font-medium"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const InvoiceDetailsModal = ({ invoice, onClose }) => {
    if (!invoice) return null;

    return (
      <div className="fixed inset-0 bg-black/30 backdrop-blur-sm flex items-center justify-center p-4 z-50">
        <div className="bg-white rounded-2xl shadow-xl p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-2xl font-semibold text-gray-900">
              Invoice #{invoice.id}
            </h3>
            <button
              onClick={onClose}
              className="p-2 hover:bg-gray-100 rounded-xl transition-colors"
            >
              <X className="h-5 w-5 text-gray-500" />
            </button>
          </div>
          <div className="space-y-6">
            <div className="flex items-center gap-3">
              <span
                className={`px-3 py-1 rounded-full text-sm font-medium border ${getStatusColor(
                  invoice.status
                )}`}
              >
                {invoice.status}
              </span>
              {invoice.jobId && (
                <span className="px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-700">
                  Job #{invoice.jobId}
                </span>
              )}
            </div>
            <div>
              <h4 className="text-sm font-medium text-gray-500 mb-2">
                Description
              </h4>
              <p className="text-gray-700">{invoice.description}</p>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h4 className="text-sm font-medium text-gray-500 mb-3">
                  Invoice Information
                </h4>
                <div className="space-y-2">
                  <div className="flex items-center gap-2">
                    <Users className="h-4 w-4 text-gray-400" />
                    <span>{invoice.customerName}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <MapPin className="h-4 w-4 text-gray-400" />
                    <span>{invoice.customerAddress}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Calendar className="h-4 w-4 text-gray-400" />
                    <span>
                      Issued: {new Date(invoice.issueDate).toLocaleDateString()}
                    </span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Calendar className="h-4 w-4 text-gray-400" />
                    <span>
                      Due: {new Date(invoice.dueDate).toLocaleDateString()}
                    </span>
                  </div>
                </div>
              </div>
              <div>
                <h4 className="text-sm font-medium text-gray-500 mb-3">
                  Items
                </h4>
                <div className="space-y-2">
                  {invoice.items.map((item, index) => (
                    <div key={index} className="flex justify-between text-sm">
                      <span>
                        {item.description} (x{item.quantity})
                      </span>
                      <span>${(item.quantity * item.rate).toFixed(2)}</span>
                    </div>
                  ))}
                </div>
                <div className="border-t mt-3 pt-3">
                  <div className="flex justify-between text-sm text-gray-600">
                    <span>Subtotal</span>
                    <span>${invoice.subtotal.toFixed(2)}</span>
                  </div>
                  <div className="flex justify-between text-sm text-gray-600 mt-1">
                    <span>Tax (10%)</span>
                    <span>${invoice.tax.toFixed(2)}</span>
                  </div>
                  <div className="flex justify-between text-sm font-semibold text-gray-900 mt-2">
                    <span>Total</span>
                    <span>${invoice.amount.toFixed(2)}</span>
                  </div>
                </div>
              </div>
            </div>
            <div className="flex gap-3">
              <button
                onClick={() => emailInvoice(invoice.id)}
                className="flex-1 bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-600 transition-colors font-medium flex items-center justify-center gap-2"
              >
                <Send className="h-4 w-4" /> Send Invoice
              </button>
              <button
                onClick={() => generatePDF("invoice", invoice)}
                className="flex-1 bg-gray-700 text-white py-2 rounded-lg hover:bg-gray-800 transition-colors font-medium flex items-center justify-center gap-2"
              >
                <Download className="h-4 w-4" /> Download PDF
              </button>
              {invoice.status !== "Paid" && (
                <button
                  onClick={() => markInvoicePaid(invoice.id, "Cash")}
                  className="flex-1 bg-emerald-500 text-white py-2 rounded-lg hover:bg-emerald-600 transition-colors font-medium"
                >
                  Mark as Paid
                </button>
              )}
              <button
                onClick={onClose}
                className="flex-1 bg-gray-100 text-gray-700 py-2 rounded-lg hover:bg-gray-200 transition-colors font-medium"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const SettingsModal = ({ onClose }) => {
    const [localProfile, setLocalProfile] = useState(businessProfile || {});

    const handleSave = () => {
      setBusinessProfile(localProfile);
      localStorage.setItem("businessProfile", JSON.stringify(localProfile));
      addNotification("success", "Settings saved successfully");
      onClose();
    };

    return (
      <div className="fixed inset-0 bg-black/30 backdrop-blur-sm flex items-center justify-center p-4 z-50">
        <div className="bg-white rounded-2xl shadow-xl p-6 w-full max-w-md max-h-[90vh] overflow-y-auto">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-xl font-semibold text-gray-900">Settings</h3>
            <button
              onClick={onClose}
              className="p-2 hover:bg-gray-100 rounded-xl transition-colors"
            >
              <X className="h-5 w-5 text-gray-500" />
            </button>
          </div>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Business Name
              </label>
              <input
                type="text"
                value={localProfile.businessName || ""}
                onChange={e =>
                  setLocalProfile({
                    ...localProfile,
                    businessName: e.target.value,
                  })
                }
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Business Type
              </label>
              <select
                value={localProfile.businessType || "Plumbing"}
                onChange={e =>
                  setLocalProfile({
                    ...localProfile,
                    businessType: e.target.value,
                  })
                }
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
              >
                <option value="Plumbing">Plumbing</option>
                <option value="Electrical">Electrical</option>
                <option value="HVAC">HVAC</option>
                <option value="General">General Contractor</option>
                <option value="Other">Other</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Address
              </label>
              <input
                type="text"
                value={localProfile.address || ""}
                onChange={e =>
                  setLocalProfile({ ...localProfile, address: e.target.value })
                }
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Phone
              </label>
              <input
                type="tel"
                value={localProfile.phone || ""}
                onChange={e =>
                  setLocalProfile({ ...localProfile, phone: e.target.value })
                }
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Email
              </label>
              <input
                type="email"
                value={localProfile.email || ""}
                onChange={e =>
                  setLocalProfile({ ...localProfile, email: e.target.value })
                }
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                License Number
              </label>
              <input
                type="text"
                value={localProfile.license || ""}
                onChange={e =>
                  setLocalProfile({ ...localProfile, license: e.target.value })
                }
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
              />
            </div>
            <div className="flex gap-3 pt-4">
              <button
                onClick={handleSave}
                className="flex-1 bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-600 transition-colors font-medium"
              >
                Save Changes
              </button>
              <button
                onClick={onClose}
                className="flex-1 bg-gray-100 text-gray-700 py-2 rounded-lg hover:bg-gray-200 transition-colors font-medium"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const Dashboard = () => {
    const totalRevenue = invoices.reduce(
      (sum, inv) => sum + (inv.status === "Paid" ? inv.amount : 0),
      0
    );
    const outstandingBalance = invoices.reduce(
      (sum, inv) => sum + (inv.status !== "Paid" ? inv.amount : 0),
      0
    );
    const activeJobs = jobs.filter(job => job.status !== "Completed").length;
    const upcomingJobs = jobs
      .filter(job => new Date(job.scheduledDate) > new Date())
      .slice(0, 5);
    const topCustomers = [...customers]
      .sort((a, b) => b.totalSpent - a.totalSpent)
      .slice(0, 5);

    return (
      <div className="space-y-8">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <div className="bg-white rounded-2xl shadow-sm p-6">
            <div className="flex items-center gap-3 mb-4">
              <DollarSign className="h-6 w-6 text-emerald-500" />
              <h3 className="text-sm font-medium text-gray-500">
                Total Revenue
              </h3>
            </div>
            <p className="text-2xl font-semibold text-gray-900">
              ${totalRevenue.toFixed(2)}
            </p>
          </div>
          <div className="bg-white rounded-2xl shadow-sm p-6">
            <div className="flex items-center gap-3 mb-4">
              <DollarSign className="h-6 w-6 text-yellow-500" />
              <h3 className="text-sm font-medium text-gray-500">
                Outstanding Balance
              </h3>
            </div>
            <p className="text-2xl font-semibold text-gray-900">
              ${outstandingBalance.toFixed(2)}
            </p>
          </div>
          <div className="bg-white rounded-2xl shadow-sm p-6">
            <div className="flex items-center gap-3 mb-4">
              <Calendar className="h-6 w-6 text-blue-500" />
              <h3 className="text-sm font-medium text-gray-500">Active Jobs</h3>
            </div>
            <p className="text-2xl font-semibold text-gray-900">{activeJobs}</p>
          </div>
          <div className="bg-white rounded-2xl shadow-sm p-6">
            <div className="flex items-center gap-3 mb-4">
              <Users className="h-6 w-6 text-purple-500" />
              <h3 className="text-sm font-medium text-gray-500">
                Total Customers
              </h3>
            </div>
            <p className="text-2xl font-semibold text-gray-900">
              {customers.length}
            </p>
          </div>
        </div>
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div className="bg-white rounded-2xl shadow-sm p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">
              Upcoming Jobs
            </h3>
            {upcomingJobs.length === 0 ? (
              <p className="text-gray-500">No upcoming jobs</p>
            ) : (
              <div className="space-y-4">
                {upcomingJobs.map(job => (
                  <div
                    key={job.id}
                    className="flex items-center justify-between"
                  >
                    <div>
                      <p className="font-medium">{job.title}</p>
                      <p className="text-sm text-gray-600">
                        {job.customerName}
                      </p>
                      <p className="text-sm text-gray-500">
                        {new Date(job.scheduledDate).toLocaleDateString()}
                      </p>
                    </div>
                    <span
                      className={`px-3 py-1 rounded-full text-xs font-medium border ${getStatusColor(
                        job.status
                      )}`}
                    >
                      {job.status}
                    </span>
                  </div>
                ))}
              </div>
            )}
          </div>
          <div className="bg-white rounded-2xl shadow-sm p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">
              Top Customers
            </h3>
            {topCustomers.length === 0 ? (
              <p className="text-gray-500">No customers yet</p>
            ) : (
              <div className="space-y-4">
                {topCustomers.map(customer => (
                  <div
                    key={customer.id}
                    className="flex items-center justify-between"
                  >
                    <div>
                      <p className="font-medium">{customer.name}</p>
                      <p className="text-sm text-gray-600">
                        {customer.customerType}
                      </p>
                    </div>
                    <p className="font-semibold">
                      ${customer.totalSpent.toFixed(2)}
                    </p>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    );
  };

  const CalendarView = () => {
    const daysInMonth = new Date(
      currentDate.getFullYear(),
      currentDate.getMonth() + 1,
      0
    ).getDate();
    const firstDay = new Date(
      currentDate.getFullYear(),
      currentDate.getMonth(),
      1
    ).getDay();
    const days = Array.from({ length: daysInMonth }, (_, i) => i + 1);
    const weeks = [];
    let week = Array(7).fill(null);

    for (let i = 0; i < firstDay; i++) week[i] = null;
    days.forEach(day => {
      const index = (firstDay + day - 1) % 7;
      week[index] = day;
      if (index === 6 || day === daysInMonth) {
        weeks.push([...week]);
        week = Array(7).fill(null);
      }
    });

    const prevMonth = () =>
      setCurrentDate(
        new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1)
      );
    const nextMonth = () =>
      setCurrentDate(
        new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1)
      );

    const jobsByDate = jobs.reduce((acc, job) => {
      const date = new Date(job.scheduledDate).getDate();
      acc[date] = acc[date] || [];
      acc[date].push(job);
      return acc;
    }, {});

    return (
      <div className="bg-white rounded-2xl shadow-sm p-6">
        <div className="flex items-center justify-between mb-6">
          <button
            onClick={prevMonth}
            className="p-2 hover:bg-gray-100 rounded-lg"
          >
            <ChevronLeft className="h-5 w-5 text-gray-600" />
          </button>
          <h2 className="text-lg font-semibold">
            {currentDate.toLocaleString("default", {
              month: "long",
              year: "numeric",
            })}
          </h2>
          <button
            onClick={nextMonth}
            className="p-2 hover:bg-gray-100 rounded-lg"
          >
            <ChevronRight className="h-5 w-5 text-gray-600" />
          </button>
        </div>
        <div className="grid grid-cols-7 gap-2 text-center">
          {["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"].map(day => (
            <div key={day} className="text-sm font-medium text-gray-500">
              {day}
            </div>
          ))}
          {weeks.map((week, weekIndex) =>
            week.map((day, dayIndex) => (
              <div
                key={`${weekIndex}-${dayIndex}`}
                className={`p-2 h-24 border border-gray-200 rounded-lg ${
                  day ? "hover:bg-gray-50" : "bg-gray-100"
                }`}
              >
                {day && (
                  <>
                    <p className="text-sm font-medium">{day}</p>
                    <div className="mt-1 space-y-1">
                      {(jobsByDate[day] || []).map(job => (
                        <div
                          key={job.id}
                          className="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded-full cursor-pointer"
                          onClick={() => setShowJobDetails(job)}
                        >
                          {job.title}
                        </div>
                      ))}
                    </div>
                  </>
                )}
              </div>
            ))
          )}
        </div>
      </div>
    );
  };

  // Main render
  if (!isAuthenticated) return <div>Please log in</div>;

  return (
    <div className="min-h-screen bg-gray-50">
      {showOnboarding && (
        <OnboardingWizard onComplete={handleOnboardingComplete} />
      )}
      <div className="fixed top-4 right-4 z-50 space-y-2">
        {notifications.map(notification => (
          <div
            key={notification.id}
            className={`p-4 rounded-lg shadow-lg transform transition-all duration-300 ${
              notification.type === "success"
                ? "bg-emerald-50 border border-emerald-200"
                : notification.type === "error"
                ? "bg-red-50 border border-red-200"
                : notification.type === "warning"
                ? "bg-amber-50 border border-amber-200"
                : "bg-blue-50 border border-blue-200"
            }`}
          >
            <div className="flex items-center gap-3">
              {notification.type === "success" && (
                <CheckCircle className="h-5 w-5 text-emerald-600" />
              )}
              {notification.type === "error" && (
                <AlertCircle className="h-5 w-5 text-red-600" />
              )}
              {notification.type === "warning" && (
                <AlertTriangle className="h-5 w-5 text-amber-600" />
              )}
              {notification.type === "info" && (
                <AlertCircle className="h-5 w-5 text-blue-600" />
              )}
              <p className="text-sm font-medium">{notification.message}</p>
            </div>
          </div>
        ))}
      </div>

      <div className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-blue-500 rounded-xl">
                <Wrench className="h-6 w-6 text-white" />
              </div>
              <h1 className="text-2xl font-bold text-gray-900">TradesCRM</h1>
            </div>
            <div className="flex items-center gap-4">
              <span className="text-sm text-gray-600">
                {businessProfile?.businessName || "My Business"}
              </span>
              <button
                onClick={() => setShowSettings(true)}
                className="p-2 hover:bg-gray-100 rounded-lg"
              >
                <Settings className="h-5 w-5 text-gray-500" />
              </button>
              <button
                onClick={() => {
                  mockAuth.signOut();
                  setIsAuthenticated(false);
                }}
                className="p-2 hover:bg-gray-100 rounded-lg"
              >
                <LogOut className="h-5 w-5 text-gray-500" />
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="bg-white shadow-sm sticky top-0 z-40">
        <div className="max-w-7xl mx-auto px-4 sm:px-6">
          <nav className="flex space-x-1">
            {[
              { id: "dashboard", label: "Dashboard", icon: BarChart3 },
              { id: "customers", label: "Customers", icon: Users },
              { id: "jobs", label: "Jobs", icon: Calendar },
              { id: "quotes", label: "Quotes", icon: Quote },
              { id: "invoices", label: "Invoices", icon: FileText },
            ].map(({ id, label, icon: Icon }) => (
              <button
                key={id}
                onClick={() => setActiveTab(id)}
                className={`flex items-center gap-2 px-4 py-4 font-medium text-sm transition-colors relative ${
                  activeTab === id
                    ? "text-blue-600"
                    : "text-gray-600 hover:text-gray-900"
                }`}
              >
                <Icon className="h-4 w-4" />
                {label}
                {activeTab === id && (
                  <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-blue-600" />
                )}
              </button>
            ))}
          </nav>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 py-8">
        {activeTab !== "dashboard" && (
          <div className="flex flex-col sm:flex-row gap-4 mb-8">
            <div className="relative flex-1">
              <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
              <input
                type="text"
                placeholder={`Search ${activeTab}...`}
                className="w-full pl-12 pr-4 py-3 bg-white border border-gray-200 rounded-xl focus:border-blue-500 focus:ring-4 focus:ring-blue-500/10 transition-all outline-none"
                value={searchTerm}
                onChange={e => setSearchTerm(e.target.value)}
              />
            </div>
            {activeTab === "jobs" && (
              <div className="flex bg-gray-100 rounded-xl p-1">
                <button
                  onClick={() => setJobView("list")}
                  className={`px-4 py-2 rounded-lg flex items-center gap-2 transition-all ${
                    jobView === "list"
                      ? "bg-white text-gray-900 shadow-sm"
                      : "text-gray-600 hover:text-gray-900"
                  }`}
                >
                  <List className="h-4 w-4" /> List
                </button>
                <button
                  onClick={() => setJobView("calendar")}
                  className={`px-4 py-2 rounded-lg flex items-center gap-2 transition-all ${
                    jobView === "calendar"
                      ? "bg-white text-gray-900 shadow-sm"
                      : "text-gray-600 hover:text-gray-900"
                  }`}
                >
                  <Grid className="h-4 w-4" /> Calendar
                </button>
              </div>
            )}
            <button
              onClick={() => {
                if (activeTab === "customers") setShowAddCustomer(true);
                if (activeTab === "jobs") setShowAddJob(true);
                if (activeTab === "invoices") setShowAddInvoice(true);
                if (activeTab === "quotes") setShowAddQuote(true);
              }}
              className="bg-blue-600 text-white px-6 py-3 rounded-xl hover:bg-blue-700 transition-colors flex items-center gap-2"
            >
              <Plus className="h-4 w-4" />
              Add {activeTab.charAt(0).toUpperCase() + activeTab.slice(1, -1)}
            </button>
          </div>
        )}

        {activeTab === "dashboard" && <Dashboard />}
        {activeTab === "customers" && (
          <div className="bg-white rounded-2xl shadow-sm">
            <div className="px-6 py-4 border-b">
              <h2 className="text-lg font-semibold">Customer Management</h2>
            </div>
            <div className="divide-y divide-gray-100">
              {customers.filter(c =>
                c.name.toLowerCase().includes(searchTerm.toLowerCase())
              ).length === 0 ? (
                <p className="text-center py-8 text-gray-500">
                  No customers found
                </p>
              ) : (
                customers
                  .filter(c =>
                    c.name.toLowerCase().includes(searchTerm.toLowerCase())
                  )
                  .map(customer => (
                    <div
                      key={customer.id}
                      className="p-6 hover:bg-gray-50 cursor-pointer"
                      onClick={() => setShowCustomerDetails(customer)}
                    >
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <div className="flex items-center gap-3 mb-2">
                            <h3 className="text-lg font-medium text-gray-900">
                              {customer.name}
                            </h3>
                            <span
                              className={`px-3 py-1 rounded-full text-xs font-medium ${
                                customer.customerType === "Commercial"
                                  ? "bg-purple-100 text-purple-700"
                                  : "bg-emerald-100 text-emerald-700"
                              }`}
                            >
                              {customer.customerType}
                            </span>
                          </div>
                          <div className="space-y-1 text-sm text-gray-600">
                            <div className="flex items-center gap-2">
                              <Phone className="h-4 w-4" /> {customer.phone}
                            </div>
                            {customer.email && (
                              <div className="flex items-center gap-2">
                                <Mail className="h-4 w-4" /> {customer.email}
                              </div>
                            )}
                            <div className="flex items-center gap-2">
                              <MapPin className="h-4 w-4" /> {customer.address}
                            </div>
                            {customer.lastJob && (
                              <div className="text-xs text-gray-500">
                                Last job:{" "}
                                {new Date(
                                  customer.lastJob
                                ).toLocaleDateString()}
                              </div>
                            )}
                          </div>
                        </div>
                        <div className="flex gap-2">
                          <button
                            className="p-2 text-gray-400 hover:text-blue-600 transition-colors"
                            title="Edit"
                          >
                            <Edit className="h-4 w-4" />
                          </button>
                          <button
                            className="p-2 text-gray-400 hover:text-red-600 transition-colors"
                            title="Delete"
                          >
                            <Trash2 className="h-4 w-4" />
                          </button>
                        </div>
                      </div>
                    </div>
                  ))
              )}
            </div>
          </div>
        )}
        {activeTab === "jobs" && jobView === "list" && (
          <div className="bg-white rounded-2xl shadow-sm">
            <div className="px-6 py-4 border-b">
              <h2 className="text-lg font-semibold">
                Job Scheduling & Tracking
              </h2>
            </div>
            <div className="divide-y divide-gray-100">
              {jobs.filter(j =>
                j.title.toLowerCase().includes(searchTerm.toLowerCase())
              ).length === 0 ? (
                <p className="text-center py-8 text-gray-500">No jobs found</p>
              ) : (
                jobs
                  .filter(j =>
                    j.title.toLowerCase().includes(searchTerm.toLowerCase())
                  )
                  .map(job => (
                    <div
                      key={job.id}
                      className="p-6 hover:bg-gray-50 cursor-pointer"
                      onClick={() => setShowJobDetails(job)}
                    >
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <div className="flex items-center gap-3 mb-2">
                            <h3 className="text-lg font-medium text-gray-900">
                              {job.title}
                            </h3>
                            <span
                              className={`px-3 py-1 rounded-full text-xs font-medium border ${getStatusColor(
                                job.status
                              )}`}
                            >
                              {job.status}
                            </span>
                            <div className="flex items-center gap-2">
                              <div
                                className={`w-2 h-2 rounded-full ${getPriorityDot(
                                  job.priority
                                )}`}
                              ></div>
                              <span className="text-xs font-medium text-gray-600">
                                {job.priority}
                              </span>
                            </div>
                          </div>
                          <p className="text-sm text-gray-600 mb-3">
                            {job.description}
                          </p>
                          <div className="grid grid-cols-1 sm:grid-cols-2 gap-2 text-sm text-gray-600">
                            <div className="flex items-center gap-2">
                              <Users className="h-4 w-4" /> {job.customerName}
                            </div>
                            <div className="flex items-center gap-2">
                              <Calendar className="h-4 w-4" />{" "}
                              {new Date(job.scheduledDate).toLocaleDateString()}
                            </div>
                            <div className="flex items-center gap-2">
                              <Clock className="h-4 w-4" /> {job.estimatedHours}
                              h estimated
                            </div>
                            <div className="flex items-center gap-2">
                              <DollarSign className="h-4 w-4" /> $
                              {job.estimatedCost} estimated
                            </div>
                            <div className="flex items-center gap-2 sm:col-span-2">
                              <MapPin className="h-4 w-4" /> {job.address}
                            </div>
                          </div>
                        </div>
                        <div className="flex gap-2">
                          <button
                            onClick={e => {
                              e.stopPropagation();
                              createInvoiceFromJob(job);
                            }}
                            className="p-2 text-gray-400 hover:text-emerald-600 transition-colors"
                            title="Create Invoice"
                          >
                            <Receipt className="h-4 w-4" />
                          </button>
                          <button
                            className="p-2 text-gray-400 hover:text-blue-600 transition-colors"
                            title="Edit"
                          >
                            <Edit className="h-4 w-4" />
                          </button>
                          <button
                            className="p-2 text-gray-400 hover:text-red-600 transition-colors"
                            title="Delete"
                          >
                            <Trash2 className="h-4 w-4" />
                          </button>
                        </div>
                      </div>
                    </div>
                  ))
              )}
            </div>
          </div>
        )}
        {activeTab === "jobs" && jobView === "calendar" && <CalendarView />}
        {activeTab === "quotes" && (
          <div className="bg-white rounded-2xl shadow-sm">
            <div className="px-6 py-4 border-b">
              <h2 className="text-lg font-semibold">Quotes & Estimates</h2>
            </div>
            <div className="divide-y divide-gray-100">
              {quotes.filter(q =>
                q.description.toLowerCase().includes(searchTerm.toLowerCase())
              ).length === 0 ? (
                <p className="text-center py-8 text-gray-500">
                  No quotes found
                </p>
              ) : (
                quotes
                  .filter(q =>
                    q.description
                      .toLowerCase()
                      .includes(searchTerm.toLowerCase())
                  )
                  .map(quote => (
                    <div
                      key={quote.id}
                      className="p-6 hover:bg-gray-50 cursor-pointer"
                      onClick={() => setShowQuoteDetails(quote)}
                    >
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <div className="flex items-center gap-3 mb-2">
                            <h3 className="text-lg font-medium text-gray-900">
                              Quote #{quote.id}
                            </h3>
                            <span
                              className={`px-3 py-1 rounded-full text-xs font-medium border ${getStatusColor(
                                quote.status
                              )}`}
                            >
                              {quote.status}
                            </span>
                          </div>
                          <p className="text-sm text-gray-600 mb-3">
                            {quote.description}
                          </p>
                          <div className="grid grid-cols-1 sm:grid-cols-2 gap-2 text-sm text-gray-600">
                            <div className="flex items-center gap-2">
                              <Users className="h-4 w-4" /> {quote.customerName}
                            </div>
                            <div className="flex items-center gap-2">
                              <MapPin className="h-4 w-4" />{" "}
                              {quote.customerAddress}
                            </div>
                            <div className="flex items-center gap-2">
                              <DollarSign className="h-4 w-4" /> Total: $
                              {quote.amount.toFixed(2)}
                            </div>
                            <div className="flex items-center gap-2">
                              <Calendar className="h-4 w-4" /> Expires:{" "}
                              {new Date(quote.expiryDate).toLocaleDateString()}
                            </div>
                          </div>
                        </div>
                        <div className="flex gap-2">
                          <button
                            onClick={e => {
                              e.stopPropagation();
                              emailQuote(quote.id);
                            }}
                            className="p-2 text-gray-400 hover:text-blue-600 transition-colors"
                            title="Send Quote"
                          >
                            <Send className="h-4 w-4" />
                          </button>
                          <button
                            className="p-2 text-gray-400 hover:text-blue-600 transition-colors"
                            title="Edit"
                          >
                            <Edit className="h-4 w-4" />
                          </button>
                          <button
                            className="p-2 text-gray-400 hover:text-red-600 transition-colors"
                            title="Delete"
                          >
                            <Trash2 className="h-4 w-4" />
                          </button>
                        </div>
                      </div>
                    </div>
                  ))
              )}
            </div>
          </div>
        )}
        {activeTab === "invoices" && (
          <div className="bg-white rounded-2xl shadow-sm">
            <div className="px-6 py-4 border-b">
              <h2 className="text-lg font-semibold">Invoicing & Payments</h2>
            </div>
            <div className="divide-y divide-gray-100">
              {invoices.filter(i =>
                i.description.toLowerCase().includes(searchTerm.toLowerCase())
              ).length === 0 ? (
                <p className="text-center py-8 text-gray-500">
                  No invoices found
                </p>
              ) : (
                invoices
                  .filter(i =>
                    i.description
                      .toLowerCase()
                      .includes(searchTerm.toLowerCase())
                  )
                  .map(invoice => (
                    <div
                      key={invoice.id}
                      className="p-6 hover:bg-gray-50 cursor-pointer"
                      onClick={() => setShowInvoiceDetails(invoice)}
                    >
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <div className="flex items-center gap-3 mb-2">
                            <h3 className="text-lg font-medium text-gray-900">
                              Invoice #{invoice.id}
                            </h3>
                            <span
                              className={`px-3 py-1 rounded-full text-xs font-medium border ${getStatusColor(
                                invoice.status
                              )}`}
                            >
                              {invoice.status}
                            </span>
                            {invoice.jobId && (
                              <span className="px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-700">
                                Job #{invoice.jobId}
                              </span>
                            )}
                          </div>
                          <p className="text-sm text-gray-600 mb-3">
                            {invoice.description}
                          </p>
                          <div className="grid grid-cols-1 sm:grid-cols-2 gap-2 text-sm text-gray-600">
                            <div className="space-y-1">
                              <div className="flex items-center gap-2">
                                <Users className="h-4 w-4" />{" "}
                                {invoice.customerName}
                              </div>
                              {invoice.customerAddress && (
                                <div className="flex items-center gap-2">
                                  <MapPin className="h-4 w-4" />{" "}
                                  {invoice.customerAddress}
                                </div>
                              )}
                            </div>
                            <div className="space-y-1">
                              <div className="flex items-center gap-2">
                                <DollarSign className="h-4 w-4" /> Total: $
                                {invoice.amount.toFixed(2)}
                              </div>
                              <div className="flex items-center gap-2">
                                <Calendar className="h-4 w-4" /> Due:{" "}
                                {new Date(invoice.dueDate).toLocaleDateString()}
                              </div>
                            </div>
                          </div>
                        </div>
                        <div className="flex gap-2">
                          <button
                            onClick={e => {
                              e.stopPropagation();
                              emailInvoice(invoice.id);
                            }}
                            className="p-2 text-gray-400 hover:text-blue-600 transition-colors"
                            title="Send Invoice"
                          >
                            <Send className="h-4 w-4" />
                          </button>
                          <button
                            className="p-2 text-gray-400 hover:text-blue-600 transition-colors"
                            title="Edit"
                          >
                            <Edit className="h-4 w-4" />
                          </button>
                          <button
                            className="p-2 text-gray-400 hover:text-red-600 transition-colors"
                            title="Delete"
                          >
                            <Trash2 className="h-4 w-4" />
                          </button>
                        </div>
                      </div>
                    </div>
                  ))
              )}
            </div>
          </div>
        )}

        {showAddCustomer && (
          <CustomerForm
            onSubmit={addCustomer}
            onCancel={() => setShowAddCustomer(false)}
          />
        )}
        {showAddJob && (
          <JobForm onSubmit={addJob} onCancel={() => setShowAddJob(false)} />
        )}
        {showAddInvoice && (
          <InvoiceForm
            onSubmit={addInvoice}
            onCancel={() => {
              setShowAddInvoice(false);
              setSelectedJobForInvoice(null);
            }}
            selectedJob={selectedJobForInvoice}
          />
        )}
        {showAddQuote && (
          <QuoteForm
            onSubmit={addQuote}
            onCancel={() => setShowAddQuote(false)}
          />
        )}
        {showCustomerDetails && (
          <CustomerDetailsModal
            customer={showCustomerDetails}
            onClose={() => setShowCustomerDetails(null)}
          />
        )}
        {showJobDetails && (
          <JobDetailsModal
            job={showJobDetails}
            onClose={() => setShowJobDetails(null)}
          />
        )}
        {showQuoteDetails && (
          <QuoteDetailsModal
            quote={showQuoteDetails}
            onClose={() => setShowQuoteDetails(null)}
          />
        )}
        {showInvoiceDetails && (
          <InvoiceDetailsModal
            invoice={showInvoiceDetails}
            onClose={() => setShowInvoiceDetails(null)}
          />
        )}
        {showSettings && (
          <SettingsModal onClose={() => setShowSettings(false)} />
        )}
      </div>
    </div>
  );
};

export default TradesCRM;
